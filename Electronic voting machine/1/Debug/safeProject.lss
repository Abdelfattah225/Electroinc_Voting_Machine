
safeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00003d8c  00003e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800164  00800164  00003f24  2**0
                  ALLOC
  3 .stab         00003498  00000000  00000000  00003f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cb0  00000000  00000000  000073bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000835b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c424  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c866  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <main>
      8a:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e5       	ldi	r26, 0x5C	; 92
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e5       	ldi	r24, 0x5C	; 92
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e5       	ldi	r22, 0x5C	; 92
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <APP_Init>:
************************************Functions definition***********************                         *
 *******************************************************************************/


/********A function to initialize the Application******/\
void APP_Init(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     ca6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_init>
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <APP_WelcomeScreen>:


void APP_WelcomeScreen(){
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	e8 97       	sbiw	r28, 0x38	; 56
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61

	/* display "Welcome" */
	LCD_clearScreen();
     cc4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("Welcome");
     cc8:	80 e6       	ldi	r24, 0x60	; 96
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	aa e7       	ldi	r26, 0x7A	; 122
     cd6:	b4 e4       	ldi	r27, 0x44	; 68
     cd8:	8d ab       	std	Y+53, r24	; 0x35
     cda:	9e ab       	std	Y+54, r25	; 0x36
     cdc:	af ab       	std	Y+55, r26	; 0x37
     cde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce0:	6d a9       	ldd	r22, Y+53	; 0x35
     ce2:	7e a9       	ldd	r23, Y+54	; 0x36
     ce4:	8f a9       	ldd	r24, Y+55	; 0x37
     ce6:	98 ad       	ldd	r25, Y+56	; 0x38
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	4a ef       	ldi	r20, 0xFA	; 250
     cee:	54 e4       	ldi	r21, 0x44	; 68
     cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	89 ab       	std	Y+49, r24	; 0x31
     cfa:	9a ab       	std	Y+50, r25	; 0x32
     cfc:	ab ab       	std	Y+51, r26	; 0x33
     cfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d00:	69 a9       	ldd	r22, Y+49	; 0x31
     d02:	7a a9       	ldd	r23, Y+50	; 0x32
     d04:	8b a9       	ldd	r24, Y+51	; 0x33
     d06:	9c a9       	ldd	r25, Y+52	; 0x34
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d14:	88 23       	and	r24, r24
     d16:	2c f4       	brge	.+10     	; 0xd22 <APP_WelcomeScreen+0x72>
		__ticks = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	98 ab       	std	Y+48, r25	; 0x30
     d1e:	8f a7       	std	Y+47, r24	; 0x2f
     d20:	3f c0       	rjmp	.+126    	; 0xda0 <APP_WelcomeScreen+0xf0>
	else if (__tmp > 65535)
     d22:	69 a9       	ldd	r22, Y+49	; 0x31
     d24:	7a a9       	ldd	r23, Y+50	; 0x32
     d26:	8b a9       	ldd	r24, Y+51	; 0x33
     d28:	9c a9       	ldd	r25, Y+52	; 0x34
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	3f ef       	ldi	r19, 0xFF	; 255
     d2e:	4f e7       	ldi	r20, 0x7F	; 127
     d30:	57 e4       	ldi	r21, 0x47	; 71
     d32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d36:	18 16       	cp	r1, r24
     d38:	4c f5       	brge	.+82     	; 0xd8c <APP_WelcomeScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3a:	6d a9       	ldd	r22, Y+53	; 0x35
     d3c:	7e a9       	ldd	r23, Y+54	; 0x36
     d3e:	8f a9       	ldd	r24, Y+55	; 0x37
     d40:	98 ad       	ldd	r25, Y+56	; 0x38
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	98 ab       	std	Y+48, r25	; 0x30
     d60:	8f a7       	std	Y+47, r24	; 0x2f
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <APP_WelcomeScreen+0xd2>
     d64:	88 ec       	ldi	r24, 0xC8	; 200
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9e a7       	std	Y+46, r25	; 0x2e
     d6a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6c:	8d a5       	ldd	r24, Y+45	; 0x2d
     d6e:	9e a5       	ldd	r25, Y+46	; 0x2e
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <APP_WelcomeScreen+0xc0>
     d74:	9e a7       	std	Y+46, r25	; 0x2e
     d76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d78:	8f a5       	ldd	r24, Y+47	; 0x2f
     d7a:	98 a9       	ldd	r25, Y+48	; 0x30
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	98 ab       	std	Y+48, r25	; 0x30
     d80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d82:	8f a5       	ldd	r24, Y+47	; 0x2f
     d84:	98 a9       	ldd	r25, Y+48	; 0x30
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	69 f7       	brne	.-38     	; 0xd64 <APP_WelcomeScreen+0xb4>
     d8a:	14 c0       	rjmp	.+40     	; 0xdb4 <APP_WelcomeScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8c:	69 a9       	ldd	r22, Y+49	; 0x31
     d8e:	7a a9       	ldd	r23, Y+50	; 0x32
     d90:	8b a9       	ldd	r24, Y+51	; 0x33
     d92:	9c a9       	ldd	r25, Y+52	; 0x34
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	98 ab       	std	Y+48, r25	; 0x30
     d9e:	8f a7       	std	Y+47, r24	; 0x2f
     da0:	8f a5       	ldd	r24, Y+47	; 0x2f
     da2:	98 a9       	ldd	r25, Y+48	; 0x30
     da4:	9c a7       	std	Y+44, r25	; 0x2c
     da6:	8b a7       	std	Y+43, r24	; 0x2b
     da8:	8b a5       	ldd	r24, Y+43	; 0x2b
     daa:	9c a5       	ldd	r25, Y+44	; 0x2c
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <APP_WelcomeScreen+0xfc>
     db0:	9c a7       	std	Y+44, r25	; 0x2c
     db2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(SHORT_DELAY);
	LCD_clearScreen();
     db4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("1-to vote for A");
     db8:	88 e6       	ldi	r24, 0x68	; 104
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
	LCD_moveCursor(1, 0);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_displayString("2-to vote for B");
     dc8:	88 e7       	ldi	r24, 0x78	; 120
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e8       	ldi	r25, 0x80	; 128
     dd4:	ab e3       	ldi	r26, 0x3B	; 59
     dd6:	b4 e4       	ldi	r27, 0x44	; 68
     dd8:	8f a3       	std	Y+39, r24	; 0x27
     dda:	98 a7       	std	Y+40, r25	; 0x28
     ddc:	a9 a7       	std	Y+41, r26	; 0x29
     dde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de0:	6f a1       	ldd	r22, Y+39	; 0x27
     de2:	78 a5       	ldd	r23, Y+40	; 0x28
     de4:	89 a5       	ldd	r24, Y+41	; 0x29
     de6:	9a a5       	ldd	r25, Y+42	; 0x2a
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a ef       	ldi	r20, 0xFA	; 250
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	8b a3       	std	Y+35, r24	; 0x23
     dfa:	9c a3       	std	Y+36, r25	; 0x24
     dfc:	ad a3       	std	Y+37, r26	; 0x25
     dfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e00:	6b a1       	ldd	r22, Y+35	; 0x23
     e02:	7c a1       	ldd	r23, Y+36	; 0x24
     e04:	8d a1       	ldd	r24, Y+37	; 0x25
     e06:	9e a1       	ldd	r25, Y+38	; 0x26
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e14:	88 23       	and	r24, r24
     e16:	2c f4       	brge	.+10     	; 0xe22 <APP_WelcomeScreen+0x172>
		__ticks = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9a a3       	std	Y+34, r25	; 0x22
     e1e:	89 a3       	std	Y+33, r24	; 0x21
     e20:	3f c0       	rjmp	.+126    	; 0xea0 <APP_WelcomeScreen+0x1f0>
	else if (__tmp > 65535)
     e22:	6b a1       	ldd	r22, Y+35	; 0x23
     e24:	7c a1       	ldd	r23, Y+36	; 0x24
     e26:	8d a1       	ldd	r24, Y+37	; 0x25
     e28:	9e a1       	ldd	r25, Y+38	; 0x26
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	3f ef       	ldi	r19, 0xFF	; 255
     e2e:	4f e7       	ldi	r20, 0x7F	; 127
     e30:	57 e4       	ldi	r21, 0x47	; 71
     e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e36:	18 16       	cp	r1, r24
     e38:	4c f5       	brge	.+82     	; 0xe8c <APP_WelcomeScreen+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3a:	6f a1       	ldd	r22, Y+39	; 0x27
     e3c:	78 a5       	ldd	r23, Y+40	; 0x28
     e3e:	89 a5       	ldd	r24, Y+41	; 0x29
     e40:	9a a5       	ldd	r25, Y+42	; 0x2a
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9a a3       	std	Y+34, r25	; 0x22
     e60:	89 a3       	std	Y+33, r24	; 0x21
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <APP_WelcomeScreen+0x1d2>
     e64:	88 ec       	ldi	r24, 0xC8	; 200
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	98 a3       	std	Y+32, r25	; 0x20
     e6a:	8f 8f       	std	Y+31, r24	; 0x1f
     e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e6e:	98 a1       	ldd	r25, Y+32	; 0x20
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <APP_WelcomeScreen+0x1c0>
     e74:	98 a3       	std	Y+32, r25	; 0x20
     e76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e78:	89 a1       	ldd	r24, Y+33	; 0x21
     e7a:	9a a1       	ldd	r25, Y+34	; 0x22
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	9a a3       	std	Y+34, r25	; 0x22
     e80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	89 a1       	ldd	r24, Y+33	; 0x21
     e84:	9a a1       	ldd	r25, Y+34	; 0x22
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	69 f7       	brne	.-38     	; 0xe64 <APP_WelcomeScreen+0x1b4>
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <APP_WelcomeScreen+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8c:	6b a1       	ldd	r22, Y+35	; 0x23
     e8e:	7c a1       	ldd	r23, Y+36	; 0x24
     e90:	8d a1       	ldd	r24, Y+37	; 0x25
     e92:	9e a1       	ldd	r25, Y+38	; 0x26
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9a a3       	std	Y+34, r25	; 0x22
     e9e:	89 a3       	std	Y+33, r24	; 0x21
     ea0:	89 a1       	ldd	r24, Y+33	; 0x21
     ea2:	9a a1       	ldd	r25, Y+34	; 0x22
     ea4:	9e 8f       	std	Y+30, r25	; 0x1e
     ea6:	8d 8f       	std	Y+29, r24	; 0x1d
     ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <APP_WelcomeScreen+0x1fc>
     eb0:	9e 8f       	std	Y+30, r25	; 0x1e
     eb2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(750);
	LCD_clearScreen();
     eb4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("3-to vote for C");
     eb8:	88 e8       	ldi	r24, 0x88	; 136
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
	LCD_moveCursor(1, 0);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_displayString("4-to vote for D");
     ec8:	88 e9       	ldi	r24, 0x98	; 152
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e8       	ldi	r25, 0x80	; 128
     ed4:	ab e3       	ldi	r26, 0x3B	; 59
     ed6:	b4 e4       	ldi	r27, 0x44	; 68
     ed8:	89 8f       	std	Y+25, r24	; 0x19
     eda:	9a 8f       	std	Y+26, r25	; 0x1a
     edc:	ab 8f       	std	Y+27, r26	; 0x1b
     ede:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee0:	69 8d       	ldd	r22, Y+25	; 0x19
     ee2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a ef       	ldi	r20, 0xFA	; 250
     eee:	54 e4       	ldi	r21, 0x44	; 68
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8d 8b       	std	Y+21, r24	; 0x15
     efa:	9e 8b       	std	Y+22, r25	; 0x16
     efc:	af 8b       	std	Y+23, r26	; 0x17
     efe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f00:	6d 89       	ldd	r22, Y+21	; 0x15
     f02:	7e 89       	ldd	r23, Y+22	; 0x16
     f04:	8f 89       	ldd	r24, Y+23	; 0x17
     f06:	98 8d       	ldd	r25, Y+24	; 0x18
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	2c f4       	brge	.+10     	; 0xf22 <APP_WelcomeScreen+0x272>
		__ticks = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 8b       	std	Y+20, r25	; 0x14
     f1e:	8b 8b       	std	Y+19, r24	; 0x13
     f20:	3f c0       	rjmp	.+126    	; 0xfa0 <APP_WelcomeScreen+0x2f0>
	else if (__tmp > 65535)
     f22:	6d 89       	ldd	r22, Y+21	; 0x15
     f24:	7e 89       	ldd	r23, Y+22	; 0x16
     f26:	8f 89       	ldd	r24, Y+23	; 0x17
     f28:	98 8d       	ldd	r25, Y+24	; 0x18
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f36:	18 16       	cp	r1, r24
     f38:	4c f5       	brge	.+82     	; 0xf8c <APP_WelcomeScreen+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3a:	69 8d       	ldd	r22, Y+25	; 0x19
     f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e2       	ldi	r20, 0x20	; 32
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	9c 8b       	std	Y+20, r25	; 0x14
     f60:	8b 8b       	std	Y+19, r24	; 0x13
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <APP_WelcomeScreen+0x2d2>
     f64:	88 ec       	ldi	r24, 0xC8	; 200
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9a 8b       	std	Y+18, r25	; 0x12
     f6a:	89 8b       	std	Y+17, r24	; 0x11
     f6c:	89 89       	ldd	r24, Y+17	; 0x11
     f6e:	9a 89       	ldd	r25, Y+18	; 0x12
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <APP_WelcomeScreen+0x2c0>
     f74:	9a 8b       	std	Y+18, r25	; 0x12
     f76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	8b 89       	ldd	r24, Y+19	; 0x13
     f7a:	9c 89       	ldd	r25, Y+20	; 0x14
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9c 8b       	std	Y+20, r25	; 0x14
     f80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	8b 89       	ldd	r24, Y+19	; 0x13
     f84:	9c 89       	ldd	r25, Y+20	; 0x14
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	69 f7       	brne	.-38     	; 0xf64 <APP_WelcomeScreen+0x2b4>
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <APP_WelcomeScreen+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8c:	6d 89       	ldd	r22, Y+21	; 0x15
     f8e:	7e 89       	ldd	r23, Y+22	; 0x16
     f90:	8f 89       	ldd	r24, Y+23	; 0x17
     f92:	98 8d       	ldd	r25, Y+24	; 0x18
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9c 8b       	std	Y+20, r25	; 0x14
     f9e:	8b 8b       	std	Y+19, r24	; 0x13
     fa0:	8b 89       	ldd	r24, Y+19	; 0x13
     fa2:	9c 89       	ldd	r25, Y+20	; 0x14
     fa4:	98 8b       	std	Y+16, r25	; 0x10
     fa6:	8f 87       	std	Y+15, r24	; 0x0f
     fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
     faa:	98 89       	ldd	r25, Y+16	; 0x10
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <APP_WelcomeScreen+0x2fc>
     fb0:	98 8b       	std	Y+16, r25	; 0x10
     fb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(750);
	LCD_clearScreen();
     fb4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("5-for Reset");
     fb8:	88 ea       	ldi	r24, 0xA8	; 168
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
	LCD_moveCursor(1, 0);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_displayString("6-the winner is ?");
     fc8:	84 eb       	ldi	r24, 0xB4	; 180
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e8       	ldi	r25, 0x80	; 128
     fd4:	ab e3       	ldi	r26, 0x3B	; 59
     fd6:	b4 e4       	ldi	r27, 0x44	; 68
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
     fda:	9c 87       	std	Y+12, r25	; 0x0c
     fdc:	ad 87       	std	Y+13, r26	; 0x0d
     fde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8f 83       	std	Y+7, r24	; 0x07
     ffa:	98 87       	std	Y+8, r25	; 0x08
     ffc:	a9 87       	std	Y+9, r26	; 0x09
     ffe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1000:	6f 81       	ldd	r22, Y+7	; 0x07
    1002:	78 85       	ldd	r23, Y+8	; 0x08
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	9a 85       	ldd	r25, Y+10	; 0x0a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <APP_WelcomeScreen+0x372>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <APP_WelcomeScreen+0x3f0>
	else if (__tmp > 65535)
    1022:	6f 81       	ldd	r22, Y+7	; 0x07
    1024:	78 85       	ldd	r23, Y+8	; 0x08
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <APP_WelcomeScreen+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	6b 85       	ldd	r22, Y+11	; 0x0b
    103c:	7c 85       	ldd	r23, Y+12	; 0x0c
    103e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1040:	9e 85       	ldd	r25, Y+14	; 0x0e
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <APP_WelcomeScreen+0x3d2>
    1064:	88 ec       	ldi	r24, 0xC8	; 200
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <APP_WelcomeScreen+0x3c0>
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <APP_WelcomeScreen+0x3b4>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <APP_WelcomeScreen+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <APP_WelcomeScreen+0x3fc>
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(750);
	LCD_clearScreen();
    10b4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	/* Move to the next window ( Main Menu Screen )*/
	APP_MainMenuScreen();
    10b8:	0e 94 67 08 	call	0x10ce	; 0x10ce <APP_MainMenuScreen>
}
    10bc:	e8 96       	adiw	r28, 0x38	; 56
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <APP_MainMenuScreen>:

/*A function to display the main menu*/
static void APP_MainMenuScreen(){
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	e9 97       	sbiw	r28, 0x39	; 57
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61

	/* display : -
	 * "A=0     B=0 "
	 * "C=0     D=0 "
	 */
	LCD_clearScreen();
    10e2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("A=0      B=0");
    10e6:	86 ec       	ldi	r24, 0xC6	; 198
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
	LCD_moveCursor(1, 0);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_displayString("C=0      D=0");
    10f6:	83 ed       	ldi	r24, 0xD3	; 211
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>

	/* Get the user decision */
	uint8 pressedKey = KEYPAD_getPressedKey();
    10fe:	0e 94 9f 14 	call	0x293e	; 0x293e <KEYPAD_getPressedKey>
    1102:	89 af       	std	Y+57, r24	; 0x39

	/* User choice is toincrement vlaue of A*/
	if(pressedKey == 1)
    1104:	89 ad       	ldd	r24, Y+57	; 0x39
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	19 f4       	brne	.+6      	; 0x1110 <APP_MainMenuScreen+0x42>
	{
		/* Move to increment vlaue of A  screen*/
		APP_Increment_A();
    110a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <APP_Increment_A>
    110e:	1a c2       	rjmp	.+1076   	; 0x1544 <APP_MainMenuScreen+0x476>
	}

	/* User choice is toincrement vlaue of B*/
	else if(pressedKey == 2)
    1110:	89 ad       	ldd	r24, Y+57	; 0x39
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	19 f4       	brne	.+6      	; 0x111c <APP_MainMenuScreen+0x4e>
	{
		/* Move to increment vlaue of A  screen*/
		APP_Increment_B();
    1116:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <APP_Increment_B>
    111a:	14 c2       	rjmp	.+1064   	; 0x1544 <APP_MainMenuScreen+0x476>
	}
	/* User choice is to increment vlaue of c*/
	else if(pressedKey == 3)
    111c:	89 ad       	ldd	r24, Y+57	; 0x39
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	19 f4       	brne	.+6      	; 0x1128 <APP_MainMenuScreen+0x5a>
	{
		/* Move to increment vlaue of c  screen*/
		APP_Increment_C();
    1122:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <APP_Increment_C>
    1126:	0e c2       	rjmp	.+1052   	; 0x1544 <APP_MainMenuScreen+0x476>
	}
		/* User choice is to increment vlaue of D*/
	else if(pressedKey == 4)
    1128:	89 ad       	ldd	r24, Y+57	; 0x39
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	19 f4       	brne	.+6      	; 0x1134 <APP_MainMenuScreen+0x66>
	{
		/* Move to increment vlaue of D  screen*/
		APP_Increment_D();
    112e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <APP_Increment_D>
    1132:	08 c2       	rjmp	.+1040   	; 0x1544 <APP_MainMenuScreen+0x476>
	}
	/* User choice is to reset application*/
	else if(pressedKey == 5)
    1134:	89 ad       	ldd	r24, Y+57	; 0x39
    1136:	85 30       	cpi	r24, 0x05	; 5
    1138:	19 f4       	brne	.+6      	; 0x1140 <APP_MainMenuScreen+0x72>
		{

			APP_Reset();
    113a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <APP_Reset>
    113e:	02 c2       	rjmp	.+1028   	; 0x1544 <APP_MainMenuScreen+0x476>
		}

	/* User choice is to determine the winner*/
	else if(pressedKey == 6)
    1140:	89 ad       	ldd	r24, Y+57	; 0x39
    1142:	86 30       	cpi	r24, 0x06	; 6
    1144:	19 f4       	brne	.+6      	; 0x114c <APP_MainMenuScreen+0x7e>
	{
		APP_Winner();
    1146:	0e 94 2a 11 	call	0x2254	; 0x2254 <APP_Winner>
    114a:	fc c1       	rjmp	.+1016   	; 0x1544 <APP_MainMenuScreen+0x476>
	{
		/* display : -
		 * "Wrong Input"
		 * "A,B,C or D only"
		 */
		LCD_clearScreen();
    114c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
		LCD_displayString("Wrong Input");
    1150:	80 ee       	ldi	r24, 0xE0	; 224
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	aa e7       	ldi	r26, 0x7A	; 122
    115e:	b4 e4       	ldi	r27, 0x44	; 68
    1160:	8d ab       	std	Y+53, r24	; 0x35
    1162:	9e ab       	std	Y+54, r25	; 0x36
    1164:	af ab       	std	Y+55, r26	; 0x37
    1166:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	6d a9       	ldd	r22, Y+53	; 0x35
    116a:	7e a9       	ldd	r23, Y+54	; 0x36
    116c:	8f a9       	ldd	r24, Y+55	; 0x37
    116e:	98 ad       	ldd	r25, Y+56	; 0x38
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a ef       	ldi	r20, 0xFA	; 250
    1176:	54 e4       	ldi	r21, 0x44	; 68
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	89 ab       	std	Y+49, r24	; 0x31
    1182:	9a ab       	std	Y+50, r25	; 0x32
    1184:	ab ab       	std	Y+51, r26	; 0x33
    1186:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1188:	69 a9       	ldd	r22, Y+49	; 0x31
    118a:	7a a9       	ldd	r23, Y+50	; 0x32
    118c:	8b a9       	ldd	r24, Y+51	; 0x33
    118e:	9c a9       	ldd	r25, Y+52	; 0x34
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <APP_MainMenuScreen+0xdc>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	98 ab       	std	Y+48, r25	; 0x30
    11a6:	8f a7       	std	Y+47, r24	; 0x2f
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <APP_MainMenuScreen+0x15a>
	else if (__tmp > 65535)
    11aa:	69 a9       	ldd	r22, Y+49	; 0x31
    11ac:	7a a9       	ldd	r23, Y+50	; 0x32
    11ae:	8b a9       	ldd	r24, Y+51	; 0x33
    11b0:	9c a9       	ldd	r25, Y+52	; 0x34
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <APP_MainMenuScreen+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	6d a9       	ldd	r22, Y+53	; 0x35
    11c4:	7e a9       	ldd	r23, Y+54	; 0x36
    11c6:	8f a9       	ldd	r24, Y+55	; 0x37
    11c8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	98 ab       	std	Y+48, r25	; 0x30
    11e8:	8f a7       	std	Y+47, r24	; 0x2f
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <APP_MainMenuScreen+0x13c>
    11ec:	88 ec       	ldi	r24, 0xC8	; 200
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9e a7       	std	Y+46, r25	; 0x2e
    11f2:	8d a7       	std	Y+45, r24	; 0x2d
    11f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    11f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <APP_MainMenuScreen+0x12a>
    11fc:	9e a7       	std	Y+46, r25	; 0x2e
    11fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	8f a5       	ldd	r24, Y+47	; 0x2f
    1202:	98 a9       	ldd	r25, Y+48	; 0x30
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	98 ab       	std	Y+48, r25	; 0x30
    1208:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	8f a5       	ldd	r24, Y+47	; 0x2f
    120c:	98 a9       	ldd	r25, Y+48	; 0x30
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	69 f7       	brne	.-38     	; 0x11ec <APP_MainMenuScreen+0x11e>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <APP_MainMenuScreen+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	69 a9       	ldd	r22, Y+49	; 0x31
    1216:	7a a9       	ldd	r23, Y+50	; 0x32
    1218:	8b a9       	ldd	r24, Y+51	; 0x33
    121a:	9c a9       	ldd	r25, Y+52	; 0x34
    121c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	98 ab       	std	Y+48, r25	; 0x30
    1226:	8f a7       	std	Y+47, r24	; 0x2f
    1228:	8f a5       	ldd	r24, Y+47	; 0x2f
    122a:	98 a9       	ldd	r25, Y+48	; 0x30
    122c:	9c a7       	std	Y+44, r25	; 0x2c
    122e:	8b a7       	std	Y+43, r24	; 0x2b
    1230:	8b a5       	ldd	r24, Y+43	; 0x2b
    1232:	9c a5       	ldd	r25, Y+44	; 0x2c
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <APP_MainMenuScreen+0x166>
    1238:	9c a7       	std	Y+44, r25	; 0x2c
    123a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(SHORT_DELAY);
		LCD_clearScreen();
    123c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
		LCD_displayString("1-to vote for A");
    1240:	88 e6       	ldi	r24, 0x68	; 104
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
		LCD_displayString("2-to vote for B");
    1250:	88 e7       	ldi	r24, 0x78	; 120
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e8       	ldi	r25, 0x80	; 128
    125c:	ab e3       	ldi	r26, 0x3B	; 59
    125e:	b4 e4       	ldi	r27, 0x44	; 68
    1260:	8f a3       	std	Y+39, r24	; 0x27
    1262:	98 a7       	std	Y+40, r25	; 0x28
    1264:	a9 a7       	std	Y+41, r26	; 0x29
    1266:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1268:	6f a1       	ldd	r22, Y+39	; 0x27
    126a:	78 a5       	ldd	r23, Y+40	; 0x28
    126c:	89 a5       	ldd	r24, Y+41	; 0x29
    126e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4a ef       	ldi	r20, 0xFA	; 250
    1276:	54 e4       	ldi	r21, 0x44	; 68
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	8b a3       	std	Y+35, r24	; 0x23
    1282:	9c a3       	std	Y+36, r25	; 0x24
    1284:	ad a3       	std	Y+37, r26	; 0x25
    1286:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1288:	6b a1       	ldd	r22, Y+35	; 0x23
    128a:	7c a1       	ldd	r23, Y+36	; 0x24
    128c:	8d a1       	ldd	r24, Y+37	; 0x25
    128e:	9e a1       	ldd	r25, Y+38	; 0x26
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e8       	ldi	r20, 0x80	; 128
    1296:	5f e3       	ldi	r21, 0x3F	; 63
    1298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    129c:	88 23       	and	r24, r24
    129e:	2c f4       	brge	.+10     	; 0x12aa <APP_MainMenuScreen+0x1dc>
		__ticks = 1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9a a3       	std	Y+34, r25	; 0x22
    12a6:	89 a3       	std	Y+33, r24	; 0x21
    12a8:	3f c0       	rjmp	.+126    	; 0x1328 <APP_MainMenuScreen+0x25a>
	else if (__tmp > 65535)
    12aa:	6b a1       	ldd	r22, Y+35	; 0x23
    12ac:	7c a1       	ldd	r23, Y+36	; 0x24
    12ae:	8d a1       	ldd	r24, Y+37	; 0x25
    12b0:	9e a1       	ldd	r25, Y+38	; 0x26
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	3f ef       	ldi	r19, 0xFF	; 255
    12b6:	4f e7       	ldi	r20, 0x7F	; 127
    12b8:	57 e4       	ldi	r21, 0x47	; 71
    12ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12be:	18 16       	cp	r1, r24
    12c0:	4c f5       	brge	.+82     	; 0x1314 <APP_MainMenuScreen+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c2:	6f a1       	ldd	r22, Y+39	; 0x27
    12c4:	78 a5       	ldd	r23, Y+40	; 0x28
    12c6:	89 a5       	ldd	r24, Y+41	; 0x29
    12c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9a a3       	std	Y+34, r25	; 0x22
    12e8:	89 a3       	std	Y+33, r24	; 0x21
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <APP_MainMenuScreen+0x23c>
    12ec:	88 ec       	ldi	r24, 0xC8	; 200
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	98 a3       	std	Y+32, r25	; 0x20
    12f2:	8f 8f       	std	Y+31, r24	; 0x1f
    12f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12f6:	98 a1       	ldd	r25, Y+32	; 0x20
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <APP_MainMenuScreen+0x22a>
    12fc:	98 a3       	std	Y+32, r25	; 0x20
    12fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	89 a1       	ldd	r24, Y+33	; 0x21
    1302:	9a a1       	ldd	r25, Y+34	; 0x22
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	9a a3       	std	Y+34, r25	; 0x22
    1308:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130a:	89 a1       	ldd	r24, Y+33	; 0x21
    130c:	9a a1       	ldd	r25, Y+34	; 0x22
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	69 f7       	brne	.-38     	; 0x12ec <APP_MainMenuScreen+0x21e>
    1312:	14 c0       	rjmp	.+40     	; 0x133c <APP_MainMenuScreen+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1314:	6b a1       	ldd	r22, Y+35	; 0x23
    1316:	7c a1       	ldd	r23, Y+36	; 0x24
    1318:	8d a1       	ldd	r24, Y+37	; 0x25
    131a:	9e a1       	ldd	r25, Y+38	; 0x26
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9a a3       	std	Y+34, r25	; 0x22
    1326:	89 a3       	std	Y+33, r24	; 0x21
    1328:	89 a1       	ldd	r24, Y+33	; 0x21
    132a:	9a a1       	ldd	r25, Y+34	; 0x22
    132c:	9e 8f       	std	Y+30, r25	; 0x1e
    132e:	8d 8f       	std	Y+29, r24	; 0x1d
    1330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1332:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <APP_MainMenuScreen+0x266>
    1338:	9e 8f       	std	Y+30, r25	; 0x1e
    133a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(750);
		LCD_clearScreen();
    133c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
		LCD_displayString("3-to vote for C");
    1340:	88 e8       	ldi	r24, 0x88	; 136
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
		LCD_displayString("4-to vote for D");
    1350:	88 e9       	ldi	r24, 0x98	; 152
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e8       	ldi	r25, 0x80	; 128
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b4 e4       	ldi	r27, 0x44	; 68
    1360:	89 8f       	std	Y+25, r24	; 0x19
    1362:	9a 8f       	std	Y+26, r25	; 0x1a
    1364:	ab 8f       	std	Y+27, r26	; 0x1b
    1366:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1368:	69 8d       	ldd	r22, Y+25	; 0x19
    136a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    136c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4a ef       	ldi	r20, 0xFA	; 250
    1376:	54 e4       	ldi	r21, 0x44	; 68
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8d 8b       	std	Y+21, r24	; 0x15
    1382:	9e 8b       	std	Y+22, r25	; 0x16
    1384:	af 8b       	std	Y+23, r26	; 0x17
    1386:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1388:	6d 89       	ldd	r22, Y+21	; 0x15
    138a:	7e 89       	ldd	r23, Y+22	; 0x16
    138c:	8f 89       	ldd	r24, Y+23	; 0x17
    138e:	98 8d       	ldd	r25, Y+24	; 0x18
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e8       	ldi	r20, 0x80	; 128
    1396:	5f e3       	ldi	r21, 0x3F	; 63
    1398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    139c:	88 23       	and	r24, r24
    139e:	2c f4       	brge	.+10     	; 0x13aa <APP_MainMenuScreen+0x2dc>
		__ticks = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 8b       	std	Y+20, r25	; 0x14
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <APP_MainMenuScreen+0x35a>
	else if (__tmp > 65535)
    13aa:	6d 89       	ldd	r22, Y+21	; 0x15
    13ac:	7e 89       	ldd	r23, Y+22	; 0x16
    13ae:	8f 89       	ldd	r24, Y+23	; 0x17
    13b0:	98 8d       	ldd	r25, Y+24	; 0x18
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	4c f5       	brge	.+82     	; 0x1414 <APP_MainMenuScreen+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c2:	69 8d       	ldd	r22, Y+25	; 0x19
    13c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e2       	ldi	r20, 0x20	; 32
    13d0:	51 e4       	ldi	r21, 0x41	; 65
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	9c 8b       	std	Y+20, r25	; 0x14
    13e8:	8b 8b       	std	Y+19, r24	; 0x13
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <APP_MainMenuScreen+0x33c>
    13ec:	88 ec       	ldi	r24, 0xC8	; 200
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9a 8b       	std	Y+18, r25	; 0x12
    13f2:	89 8b       	std	Y+17, r24	; 0x11
    13f4:	89 89       	ldd	r24, Y+17	; 0x11
    13f6:	9a 89       	ldd	r25, Y+18	; 0x12
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <APP_MainMenuScreen+0x32a>
    13fc:	9a 8b       	std	Y+18, r25	; 0x12
    13fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	8b 89       	ldd	r24, Y+19	; 0x13
    1402:	9c 89       	ldd	r25, Y+20	; 0x14
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	9c 8b       	std	Y+20, r25	; 0x14
    1408:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	9c 89       	ldd	r25, Y+20	; 0x14
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	69 f7       	brne	.-38     	; 0x13ec <APP_MainMenuScreen+0x31e>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <APP_MainMenuScreen+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9c 8b       	std	Y+20, r25	; 0x14
    1426:	8b 8b       	std	Y+19, r24	; 0x13
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	98 8b       	std	Y+16, r25	; 0x10
    142e:	8f 87       	std	Y+15, r24	; 0x0f
    1430:	8f 85       	ldd	r24, Y+15	; 0x0f
    1432:	98 89       	ldd	r25, Y+16	; 0x10
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <APP_MainMenuScreen+0x366>
    1438:	98 8b       	std	Y+16, r25	; 0x10
    143a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(750);
		LCD_clearScreen();
    143c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
		LCD_displayString("5-for Reset");
    1440:	88 ea       	ldi	r24, 0xA8	; 168
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
		LCD_displayString("6-the winner is ?");
    1450:	84 eb       	ldi	r24, 0xB4	; 180
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e8       	ldi	r25, 0x80	; 128
    145c:	ab e3       	ldi	r26, 0x3B	; 59
    145e:	b4 e4       	ldi	r27, 0x44	; 68
    1460:	8b 87       	std	Y+11, r24	; 0x0b
    1462:	9c 87       	std	Y+12, r25	; 0x0c
    1464:	ad 87       	std	Y+13, r26	; 0x0d
    1466:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	6b 85       	ldd	r22, Y+11	; 0x0b
    146a:	7c 85       	ldd	r23, Y+12	; 0x0c
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a ef       	ldi	r20, 0xFA	; 250
    1476:	54 e4       	ldi	r21, 0x44	; 68
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8f 83       	std	Y+7, r24	; 0x07
    1482:	98 87       	std	Y+8, r25	; 0x08
    1484:	a9 87       	std	Y+9, r26	; 0x09
    1486:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1488:	6f 81       	ldd	r22, Y+7	; 0x07
    148a:	78 85       	ldd	r23, Y+8	; 0x08
    148c:	89 85       	ldd	r24, Y+9	; 0x09
    148e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	2c f4       	brge	.+10     	; 0x14aa <APP_MainMenuScreen+0x3dc>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	3f c0       	rjmp	.+126    	; 0x1528 <APP_MainMenuScreen+0x45a>
	else if (__tmp > 65535)
    14aa:	6f 81       	ldd	r22, Y+7	; 0x07
    14ac:	78 85       	ldd	r23, Y+8	; 0x08
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	4c f5       	brge	.+82     	; 0x1514 <APP_MainMenuScreen+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <APP_MainMenuScreen+0x43c>
    14ec:	88 ec       	ldi	r24, 0xC8	; 200
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <APP_MainMenuScreen+0x42a>
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	69 f7       	brne	.-38     	; 0x14ec <APP_MainMenuScreen+0x41e>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <APP_MainMenuScreen+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <APP_MainMenuScreen+0x466>
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(750);
		LCD_clearScreen();
    153c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>

		/* Move to the menu screen again */
		APP_WrongInput();
    1540:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <APP_WrongInput>
	}
}
    1544:	e9 96       	adiw	r28, 0x39	; 57
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <APP_SecondInput>:



 void APP_SecondInput()
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	e9 97       	sbiw	r28, 0x39	; 57
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
	/* Get the user decision */
		uint8 pressedKey = KEYPAD_getPressedKey();
    156a:	0e 94 9f 14 	call	0x293e	; 0x293e <KEYPAD_getPressedKey>
    156e:	89 af       	std	Y+57, r24	; 0x39

		/* User choice is to increment vlaue of A*/
		if(pressedKey == 1)
    1570:	89 ad       	ldd	r24, Y+57	; 0x39
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	19 f4       	brne	.+6      	; 0x157c <APP_SecondInput+0x26>
		{
			/* Move to increment vlaue of A  screen*/
			APP_Increment_A();
    1576:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <APP_Increment_A>
    157a:	1a c2       	rjmp	.+1076   	; 0x19b0 <APP_SecondInput+0x45a>

		}

		/* User choice is to increment vlaue of B*/
		else if(pressedKey == 2)
    157c:	89 ad       	ldd	r24, Y+57	; 0x39
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	19 f4       	brne	.+6      	; 0x1588 <APP_SecondInput+0x32>
		{

			/* Move to increment vlaue of A  screen*/
			APP_Increment_B();
    1582:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <APP_Increment_B>
    1586:	14 c2       	rjmp	.+1064   	; 0x19b0 <APP_SecondInput+0x45a>
		}
		/* User choice is to increment vlaue of c*/
		else if(pressedKey == 3)
    1588:	89 ad       	ldd	r24, Y+57	; 0x39
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	19 f4       	brne	.+6      	; 0x1594 <APP_SecondInput+0x3e>
		{
			/* Move to increment vlaue of c  screen*/
			APP_Increment_C();
    158e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <APP_Increment_C>
    1592:	0e c2       	rjmp	.+1052   	; 0x19b0 <APP_SecondInput+0x45a>
		}
			/* User choice is to increment vlaue of D*/
		else if(pressedKey == 4)
    1594:	89 ad       	ldd	r24, Y+57	; 0x39
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	19 f4       	brne	.+6      	; 0x15a0 <APP_SecondInput+0x4a>
		{
			/* Move to increment vlaue of D  screen*/
			APP_Increment_D();
    159a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <APP_Increment_D>
    159e:	08 c2       	rjmp	.+1040   	; 0x19b0 <APP_SecondInput+0x45a>
		}
		/* User choice is to reset application*/
		else if(pressedKey == 5)
    15a0:	89 ad       	ldd	r24, Y+57	; 0x39
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	19 f4       	brne	.+6      	; 0x15ac <APP_SecondInput+0x56>
			{

				APP_Reset();
    15a6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <APP_Reset>
    15aa:	02 c2       	rjmp	.+1028   	; 0x19b0 <APP_SecondInput+0x45a>
			}

		/* User choice is to determine the winner*/
		else if(pressedKey == 6)
    15ac:	89 ad       	ldd	r24, Y+57	; 0x39
    15ae:	86 30       	cpi	r24, 0x06	; 6
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <APP_SecondInput+0x62>
		{
			APP_Winner();
    15b2:	0e 94 2a 11 	call	0x2254	; 0x2254 <APP_Winner>
    15b6:	fc c1       	rjmp	.+1016   	; 0x19b0 <APP_SecondInput+0x45a>
		{
			/* display : -
			 * "Wrong Input"
			 * "A,B,C or D only"
			 */
			LCD_clearScreen();
    15b8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("Wrong Input");
    15bc:	80 ee       	ldi	r24, 0xE0	; 224
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	aa e7       	ldi	r26, 0x7A	; 122
    15ca:	b4 e4       	ldi	r27, 0x44	; 68
    15cc:	8d ab       	std	Y+53, r24	; 0x35
    15ce:	9e ab       	std	Y+54, r25	; 0x36
    15d0:	af ab       	std	Y+55, r26	; 0x37
    15d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6d a9       	ldd	r22, Y+53	; 0x35
    15d6:	7e a9       	ldd	r23, Y+54	; 0x36
    15d8:	8f a9       	ldd	r24, Y+55	; 0x37
    15da:	98 ad       	ldd	r25, Y+56	; 0x38
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a ef       	ldi	r20, 0xFA	; 250
    15e2:	54 e4       	ldi	r21, 0x44	; 68
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	89 ab       	std	Y+49, r24	; 0x31
    15ee:	9a ab       	std	Y+50, r25	; 0x32
    15f0:	ab ab       	std	Y+51, r26	; 0x33
    15f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15f4:	69 a9       	ldd	r22, Y+49	; 0x31
    15f6:	7a a9       	ldd	r23, Y+50	; 0x32
    15f8:	8b a9       	ldd	r24, Y+51	; 0x33
    15fa:	9c a9       	ldd	r25, Y+52	; 0x34
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <APP_SecondInput+0xc0>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	98 ab       	std	Y+48, r25	; 0x30
    1612:	8f a7       	std	Y+47, r24	; 0x2f
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <APP_SecondInput+0x13e>
	else if (__tmp > 65535)
    1616:	69 a9       	ldd	r22, Y+49	; 0x31
    1618:	7a a9       	ldd	r23, Y+50	; 0x32
    161a:	8b a9       	ldd	r24, Y+51	; 0x33
    161c:	9c a9       	ldd	r25, Y+52	; 0x34
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <APP_SecondInput+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6d a9       	ldd	r22, Y+53	; 0x35
    1630:	7e a9       	ldd	r23, Y+54	; 0x36
    1632:	8f a9       	ldd	r24, Y+55	; 0x37
    1634:	98 ad       	ldd	r25, Y+56	; 0x38
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <APP_SecondInput+0x120>
    1658:	88 ec       	ldi	r24, 0xC8	; 200
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e a7       	std	Y+46, r25	; 0x2e
    165e:	8d a7       	std	Y+45, r24	; 0x2d
    1660:	8d a5       	ldd	r24, Y+45	; 0x2d
    1662:	9e a5       	ldd	r25, Y+46	; 0x2e
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <APP_SecondInput+0x10e>
    1668:	9e a7       	std	Y+46, r25	; 0x2e
    166a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	98 ab       	std	Y+48, r25	; 0x30
    1674:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8f a5       	ldd	r24, Y+47	; 0x2f
    1678:	98 a9       	ldd	r25, Y+48	; 0x30
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <APP_SecondInput+0x102>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <APP_SecondInput+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	69 a9       	ldd	r22, Y+49	; 0x31
    1682:	7a a9       	ldd	r23, Y+50	; 0x32
    1684:	8b a9       	ldd	r24, Y+51	; 0x33
    1686:	9c a9       	ldd	r25, Y+52	; 0x34
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	98 ab       	std	Y+48, r25	; 0x30
    1692:	8f a7       	std	Y+47, r24	; 0x2f
    1694:	8f a5       	ldd	r24, Y+47	; 0x2f
    1696:	98 a9       	ldd	r25, Y+48	; 0x30
    1698:	9c a7       	std	Y+44, r25	; 0x2c
    169a:	8b a7       	std	Y+43, r24	; 0x2b
    169c:	8b a5       	ldd	r24, Y+43	; 0x2b
    169e:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <APP_SecondInput+0x14a>
    16a4:	9c a7       	std	Y+44, r25	; 0x2c
    16a6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(SHORT_DELAY);
			LCD_clearScreen();
    16a8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("1-to vote for A");
    16ac:	88 e6       	ldi	r24, 0x68	; 104
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
			LCD_moveCursor(1, 0);
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
			LCD_displayString("2-to vote for B");
    16bc:	88 e7       	ldi	r24, 0x78	; 120
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e8       	ldi	r25, 0x80	; 128
    16c8:	ab e3       	ldi	r26, 0x3B	; 59
    16ca:	b4 e4       	ldi	r27, 0x44	; 68
    16cc:	8f a3       	std	Y+39, r24	; 0x27
    16ce:	98 a7       	std	Y+40, r25	; 0x28
    16d0:	a9 a7       	std	Y+41, r26	; 0x29
    16d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d4:	6f a1       	ldd	r22, Y+39	; 0x27
    16d6:	78 a5       	ldd	r23, Y+40	; 0x28
    16d8:	89 a5       	ldd	r24, Y+41	; 0x29
    16da:	9a a5       	ldd	r25, Y+42	; 0x2a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4a ef       	ldi	r20, 0xFA	; 250
    16e2:	54 e4       	ldi	r21, 0x44	; 68
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	8b a3       	std	Y+35, r24	; 0x23
    16ee:	9c a3       	std	Y+36, r25	; 0x24
    16f0:	ad a3       	std	Y+37, r26	; 0x25
    16f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f4:	6b a1       	ldd	r22, Y+35	; 0x23
    16f6:	7c a1       	ldd	r23, Y+36	; 0x24
    16f8:	8d a1       	ldd	r24, Y+37	; 0x25
    16fa:	9e a1       	ldd	r25, Y+38	; 0x26
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	2c f4       	brge	.+10     	; 0x1716 <APP_SecondInput+0x1c0>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9a a3       	std	Y+34, r25	; 0x22
    1712:	89 a3       	std	Y+33, r24	; 0x21
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <APP_SecondInput+0x23e>
	else if (__tmp > 65535)
    1716:	6b a1       	ldd	r22, Y+35	; 0x23
    1718:	7c a1       	ldd	r23, Y+36	; 0x24
    171a:	8d a1       	ldd	r24, Y+37	; 0x25
    171c:	9e a1       	ldd	r25, Y+38	; 0x26
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	57 e4       	ldi	r21, 0x47	; 71
    1726:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    172a:	18 16       	cp	r1, r24
    172c:	4c f5       	brge	.+82     	; 0x1780 <APP_SecondInput+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172e:	6f a1       	ldd	r22, Y+39	; 0x27
    1730:	78 a5       	ldd	r23, Y+40	; 0x28
    1732:	89 a5       	ldd	r24, Y+41	; 0x29
    1734:	9a a5       	ldd	r25, Y+42	; 0x2a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9a a3       	std	Y+34, r25	; 0x22
    1754:	89 a3       	std	Y+33, r24	; 0x21
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <APP_SecondInput+0x220>
    1758:	88 ec       	ldi	r24, 0xC8	; 200
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	98 a3       	std	Y+32, r25	; 0x20
    175e:	8f 8f       	std	Y+31, r24	; 0x1f
    1760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1762:	98 a1       	ldd	r25, Y+32	; 0x20
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <APP_SecondInput+0x20e>
    1768:	98 a3       	std	Y+32, r25	; 0x20
    176a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	89 a1       	ldd	r24, Y+33	; 0x21
    176e:	9a a1       	ldd	r25, Y+34	; 0x22
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9a a3       	std	Y+34, r25	; 0x22
    1774:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1776:	89 a1       	ldd	r24, Y+33	; 0x21
    1778:	9a a1       	ldd	r25, Y+34	; 0x22
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	69 f7       	brne	.-38     	; 0x1758 <APP_SecondInput+0x202>
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <APP_SecondInput+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	6b a1       	ldd	r22, Y+35	; 0x23
    1782:	7c a1       	ldd	r23, Y+36	; 0x24
    1784:	8d a1       	ldd	r24, Y+37	; 0x25
    1786:	9e a1       	ldd	r25, Y+38	; 0x26
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9a a3       	std	Y+34, r25	; 0x22
    1792:	89 a3       	std	Y+33, r24	; 0x21
    1794:	89 a1       	ldd	r24, Y+33	; 0x21
    1796:	9a a1       	ldd	r25, Y+34	; 0x22
    1798:	9e 8f       	std	Y+30, r25	; 0x1e
    179a:	8d 8f       	std	Y+29, r24	; 0x1d
    179c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <APP_SecondInput+0x24a>
    17a4:	9e 8f       	std	Y+30, r25	; 0x1e
    17a6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(750);
			LCD_clearScreen();
    17a8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("3-to vote for C");
    17ac:	88 e8       	ldi	r24, 0x88	; 136
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
			LCD_moveCursor(1, 0);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
			LCD_displayString("4-to vote for D");
    17bc:	88 e9       	ldi	r24, 0x98	; 152
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e8       	ldi	r25, 0x80	; 128
    17c8:	ab e3       	ldi	r26, 0x3B	; 59
    17ca:	b4 e4       	ldi	r27, 0x44	; 68
    17cc:	89 8f       	std	Y+25, r24	; 0x19
    17ce:	9a 8f       	std	Y+26, r25	; 0x1a
    17d0:	ab 8f       	std	Y+27, r26	; 0x1b
    17d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	69 8d       	ldd	r22, Y+25	; 0x19
    17d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a ef       	ldi	r20, 0xFA	; 250
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8d 8b       	std	Y+21, r24	; 0x15
    17ee:	9e 8b       	std	Y+22, r25	; 0x16
    17f0:	af 8b       	std	Y+23, r26	; 0x17
    17f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f4:	6d 89       	ldd	r22, Y+21	; 0x15
    17f6:	7e 89       	ldd	r23, Y+22	; 0x16
    17f8:	8f 89       	ldd	r24, Y+23	; 0x17
    17fa:	98 8d       	ldd	r25, Y+24	; 0x18
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <APP_SecondInput+0x2c0>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <APP_SecondInput+0x33e>
	else if (__tmp > 65535)
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <APP_SecondInput+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	69 8d       	ldd	r22, Y+25	; 0x19
    1830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9c 8b       	std	Y+20, r25	; 0x14
    1854:	8b 8b       	std	Y+19, r24	; 0x13
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <APP_SecondInput+0x320>
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9a 8b       	std	Y+18, r25	; 0x12
    185e:	89 8b       	std	Y+17, r24	; 0x11
    1860:	89 89       	ldd	r24, Y+17	; 0x11
    1862:	9a 89       	ldd	r25, Y+18	; 0x12
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <APP_SecondInput+0x30e>
    1868:	9a 8b       	std	Y+18, r25	; 0x12
    186a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	8b 89       	ldd	r24, Y+19	; 0x13
    186e:	9c 89       	ldd	r25, Y+20	; 0x14
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9c 8b       	std	Y+20, r25	; 0x14
    1874:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	8b 89       	ldd	r24, Y+19	; 0x13
    1878:	9c 89       	ldd	r25, Y+20	; 0x14
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <APP_SecondInput+0x302>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <APP_SecondInput+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6d 89       	ldd	r22, Y+21	; 0x15
    1882:	7e 89       	ldd	r23, Y+22	; 0x16
    1884:	8f 89       	ldd	r24, Y+23	; 0x17
    1886:	98 8d       	ldd	r25, Y+24	; 0x18
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	8b 89       	ldd	r24, Y+19	; 0x13
    1896:	9c 89       	ldd	r25, Y+20	; 0x14
    1898:	98 8b       	std	Y+16, r25	; 0x10
    189a:	8f 87       	std	Y+15, r24	; 0x0f
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	98 89       	ldd	r25, Y+16	; 0x10
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <APP_SecondInput+0x34a>
    18a4:	98 8b       	std	Y+16, r25	; 0x10
    18a6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(750);
			LCD_clearScreen();
    18a8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("5-for Reset");
    18ac:	88 ea       	ldi	r24, 0xA8	; 168
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
			LCD_moveCursor(1, 0);
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
			LCD_displayString("6-the winner is ?");
    18bc:	84 eb       	ldi	r24, 0xB4	; 180
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e8       	ldi	r25, 0x80	; 128
    18c8:	ab e3       	ldi	r26, 0x3B	; 59
    18ca:	b4 e4       	ldi	r27, 0x44	; 68
    18cc:	8b 87       	std	Y+11, r24	; 0x0b
    18ce:	9c 87       	std	Y+12, r25	; 0x0c
    18d0:	ad 87       	std	Y+13, r26	; 0x0d
    18d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18da:	9e 85       	ldd	r25, Y+14	; 0x0e
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a ef       	ldi	r20, 0xFA	; 250
    18e2:	54 e4       	ldi	r21, 0x44	; 68
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8f 83       	std	Y+7, r24	; 0x07
    18ee:	98 87       	std	Y+8, r25	; 0x08
    18f0:	a9 87       	std	Y+9, r26	; 0x09
    18f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <APP_SecondInput+0x3c0>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <APP_SecondInput+0x43e>
	else if (__tmp > 65535)
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <APP_SecondInput+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1930:	7c 85       	ldd	r23, Y+12	; 0x0c
    1932:	8d 85       	ldd	r24, Y+13	; 0x0d
    1934:	9e 85       	ldd	r25, Y+14	; 0x0e
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <APP_SecondInput+0x420>
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <APP_SecondInput+0x40e>
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <APP_SecondInput+0x402>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <APP_SecondInput+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <APP_SecondInput+0x44a>
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(750);
			LCD_clearScreen();
    19a8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			/* Move to the menu screen again */
			APP_WrongInput();
    19ac:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <APP_WrongInput>
		}
}
    19b0:	e9 96       	adiw	r28, 0x39	; 57
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <APP_Increment_A>:

/*functions to make increment A,B,C,D */


static void APP_Increment_A()
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62


	i++;
    19ca:	80 91 64 01 	lds	r24, 0x0164
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	80 93 64 01 	sts	0x0164, r24
	LCD_moveCursor(0,2);
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	62 e0       	ldi	r22, 0x02	; 2
    19d8:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(i);
    19dc:	80 91 64 01 	lds	r24, 0x0164
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>

}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <APP_Increment_B>:



static void APP_Increment_B()
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	j++;
    19f6:	80 91 65 01 	lds	r24, 0x0165
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	80 93 65 01 	sts	0x0165, r24
	LCD_moveCursor(0,11);
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	6b e0       	ldi	r22, 0x0B	; 11
    1a04:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(j);
    1a08:	80 91 65 01 	lds	r24, 0x0165
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>

}
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <APP_Increment_C>:



static void APP_Increment_C()
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	k++;
    1a22:	80 91 66 01 	lds	r24, 0x0166
    1a26:	8f 5f       	subi	r24, 0xFF	; 255
    1a28:	80 93 66 01 	sts	0x0166, r24
	LCD_moveCursor(1,2);
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	62 e0       	ldi	r22, 0x02	; 2
    1a30:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(k);
    1a34:	80 91 66 01 	lds	r24, 0x0166
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>

}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <APP_Increment_D>:


static void APP_Increment_D()
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	L++;
    1a4e:	80 91 67 01 	lds	r24, 0x0167
    1a52:	8f 5f       	subi	r24, 0xFF	; 255
    1a54:	80 93 67 01 	sts	0x0167, r24
	LCD_moveCursor(1,11);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	6b e0       	ldi	r22, 0x0B	; 11
    1a5c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(L);
    1a60:	80 91 67 01 	lds	r24, 0x0167
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>


}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <APP_WrongInput>:
/**************************************************/
/*functions to Warin the user */


static void APP_WrongInput()
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	e9 97       	sbiw	r28, 0x39	; 57
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1a86:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("A=       B=");
    1a8a:	8c ee       	ldi	r24, 0xEC	; 236
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
	LCD_moveCursor(0,2);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(i);
    1a9a:	80 91 64 01 	lds	r24, 0x0164
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>
	LCD_moveCursor(0,11);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	6b e0       	ldi	r22, 0x0B	; 11
    1aaa:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(j);
    1aae:	80 91 65 01 	lds	r24, 0x0165
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>
	LCD_moveCursor(1, 0);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_displayString("C=       D=");
    1ac2:	88 ef       	ldi	r24, 0xF8	; 248
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
	LCD_moveCursor(1,2);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	62 e0       	ldi	r22, 0x02	; 2
    1ace:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(k);
    1ad2:	80 91 66 01 	lds	r24, 0x0166
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>
	LCD_moveCursor(1,11);
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	6b e0       	ldi	r22, 0x0B	; 11
    1ae2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
	LCD_integerToString(L);
    1ae6:	80 91 67 01 	lds	r24, 0x0167
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 cb 1c 	call	0x3996	; 0x3996 <LCD_integerToString>
	/* Get the user decision */
		uint8 pressedKey = KEYPAD_getPressedKey();
    1af2:	0e 94 9f 14 	call	0x293e	; 0x293e <KEYPAD_getPressedKey>
    1af6:	89 af       	std	Y+57, r24	; 0x39

		/* User choice is toincrement vlaue of A*/
		if(pressedKey == 1)
    1af8:	89 ad       	ldd	r24, Y+57	; 0x39
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	19 f4       	brne	.+6      	; 0x1b04 <APP_WrongInput+0x92>
		{
			/* Move to increment vlaue of A  screen*/
			APP_Increment_A();
    1afe:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <APP_Increment_A>
    1b02:	1a c2       	rjmp	.+1076   	; 0x1f38 <APP_WrongInput+0x4c6>
		}

		/* User choice is toincrement vlaue of B*/
		else if(pressedKey == 2)
    1b04:	89 ad       	ldd	r24, Y+57	; 0x39
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <APP_WrongInput+0x9e>
		{
			/* Move to increment vlaue of A  screen*/
			APP_Increment_B();
    1b0a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <APP_Increment_B>
    1b0e:	14 c2       	rjmp	.+1064   	; 0x1f38 <APP_WrongInput+0x4c6>
		}
		/* User choice is to increment vlaue of c*/
		else if(pressedKey == 3)
    1b10:	89 ad       	ldd	r24, Y+57	; 0x39
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	19 f4       	brne	.+6      	; 0x1b1c <APP_WrongInput+0xaa>
		{
			/* Move to increment vlaue of c  screen*/
			APP_Increment_C();
    1b16:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <APP_Increment_C>
    1b1a:	0e c2       	rjmp	.+1052   	; 0x1f38 <APP_WrongInput+0x4c6>
		}
			/* User choice is to increment vlaue of D*/
		else if(pressedKey == 4)
    1b1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <APP_WrongInput+0xb6>
		{
			/* Move to increment vlaue of D  screen*/
			APP_Increment_D();
    1b22:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <APP_Increment_D>
    1b26:	08 c2       	rjmp	.+1040   	; 0x1f38 <APP_WrongInput+0x4c6>
		}
		/* User choice is to reset application*/
		else if(pressedKey == 5)
    1b28:	89 ad       	ldd	r24, Y+57	; 0x39
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	19 f4       	brne	.+6      	; 0x1b34 <APP_WrongInput+0xc2>
			{

				APP_Reset();
    1b2e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <APP_Reset>
    1b32:	02 c2       	rjmp	.+1028   	; 0x1f38 <APP_WrongInput+0x4c6>
			}

		/* User choice is to determine the winner*/
		else if(pressedKey == 6)
    1b34:	89 ad       	ldd	r24, Y+57	; 0x39
    1b36:	86 30       	cpi	r24, 0x06	; 6
    1b38:	19 f4       	brne	.+6      	; 0x1b40 <APP_WrongInput+0xce>
		{
			APP_Winner();
    1b3a:	0e 94 2a 11 	call	0x2254	; 0x2254 <APP_Winner>
    1b3e:	fc c1       	rjmp	.+1016   	; 0x1f38 <APP_WrongInput+0x4c6>
		{
			/* display : -
			 * "Wrong Input"
			 * "A,B,C or D only"
			 */
			LCD_clearScreen();
    1b40:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("Wrong Input");
    1b44:	80 ee       	ldi	r24, 0xE0	; 224
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	aa e7       	ldi	r26, 0x7A	; 122
    1b52:	b4 e4       	ldi	r27, 0x44	; 68
    1b54:	8d ab       	std	Y+53, r24	; 0x35
    1b56:	9e ab       	std	Y+54, r25	; 0x36
    1b58:	af ab       	std	Y+55, r26	; 0x37
    1b5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b60:	8f a9       	ldd	r24, Y+55	; 0x37
    1b62:	98 ad       	ldd	r25, Y+56	; 0x38
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	89 ab       	std	Y+49, r24	; 0x31
    1b76:	9a ab       	std	Y+50, r25	; 0x32
    1b78:	ab ab       	std	Y+51, r26	; 0x33
    1b7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b80:	8b a9       	ldd	r24, Y+51	; 0x33
    1b82:	9c a9       	ldd	r25, Y+52	; 0x34
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <APP_WrongInput+0x12c>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	98 ab       	std	Y+48, r25	; 0x30
    1b9a:	8f a7       	std	Y+47, r24	; 0x2f
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <APP_WrongInput+0x1aa>
	else if (__tmp > 65535)
    1b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <APP_WrongInput+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bba:	8f a9       	ldd	r24, Y+55	; 0x37
    1bbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	98 ab       	std	Y+48, r25	; 0x30
    1bdc:	8f a7       	std	Y+47, r24	; 0x2f
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <APP_WrongInput+0x18c>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9e a7       	std	Y+46, r25	; 0x2e
    1be6:	8d a7       	std	Y+45, r24	; 0x2d
    1be8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <APP_WrongInput+0x17a>
    1bf0:	9e a7       	std	Y+46, r25	; 0x2e
    1bf2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	98 ab       	std	Y+48, r25	; 0x30
    1bfc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c00:	98 a9       	ldd	r25, Y+48	; 0x30
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <APP_WrongInput+0x16e>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <APP_WrongInput+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	98 ab       	std	Y+48, r25	; 0x30
    1c1a:	8f a7       	std	Y+47, r24	; 0x2f
    1c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c20:	9c a7       	std	Y+44, r25	; 0x2c
    1c22:	8b a7       	std	Y+43, r24	; 0x2b
    1c24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <APP_WrongInput+0x1b6>
    1c2c:	9c a7       	std	Y+44, r25	; 0x2c
    1c2e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(SHORT_DELAY);
			LCD_clearScreen();
    1c30:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("1-to vote for A");
    1c34:	88 e6       	ldi	r24, 0x68	; 104
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
			LCD_displayString("2-to vote for B");
    1c44:	88 e7       	ldi	r24, 0x78	; 120
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e8       	ldi	r25, 0x80	; 128
    1c50:	ab e3       	ldi	r26, 0x3B	; 59
    1c52:	b4 e4       	ldi	r27, 0x44	; 68
    1c54:	8f a3       	std	Y+39, r24	; 0x27
    1c56:	98 a7       	std	Y+40, r25	; 0x28
    1c58:	a9 a7       	std	Y+41, r26	; 0x29
    1c5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c60:	89 a5       	ldd	r24, Y+41	; 0x29
    1c62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8b a3       	std	Y+35, r24	; 0x23
    1c76:	9c a3       	std	Y+36, r25	; 0x24
    1c78:	ad a3       	std	Y+37, r26	; 0x25
    1c7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c80:	8d a1       	ldd	r24, Y+37	; 0x25
    1c82:	9e a1       	ldd	r25, Y+38	; 0x26
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <APP_WrongInput+0x22c>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <APP_WrongInput+0x2aa>
	else if (__tmp > 65535)
    1c9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <APP_WrongInput+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cba:	89 a5       	ldd	r24, Y+41	; 0x29
    1cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <APP_WrongInput+0x28c>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	98 a3       	std	Y+32, r25	; 0x20
    1ce6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cea:	98 a1       	ldd	r25, Y+32	; 0x20
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <APP_WrongInput+0x27a>
    1cf0:	98 a3       	std	Y+32, r25	; 0x20
    1cf2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9a a3       	std	Y+34, r25	; 0x22
    1cfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <APP_WrongInput+0x26e>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <APP_WrongInput+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
    1d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d20:	9e 8f       	std	Y+30, r25	; 0x1e
    1d22:	8d 8f       	std	Y+29, r24	; 0x1d
    1d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <APP_WrongInput+0x2b6>
    1d2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(750);
			LCD_clearScreen();
    1d30:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("3-to vote for C");
    1d34:	88 e8       	ldi	r24, 0x88	; 136
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
			LCD_displayString("4-to vote for D");
    1d44:	88 e9       	ldi	r24, 0x98	; 152
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e8       	ldi	r25, 0x80	; 128
    1d50:	ab e3       	ldi	r26, 0x3B	; 59
    1d52:	b4 e4       	ldi	r27, 0x44	; 68
    1d54:	89 8f       	std	Y+25, r24	; 0x19
    1d56:	9a 8f       	std	Y+26, r25	; 0x1a
    1d58:	ab 8f       	std	Y+27, r26	; 0x1b
    1d5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a ef       	ldi	r20, 0xFA	; 250
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	8d 8b       	std	Y+21, r24	; 0x15
    1d76:	9e 8b       	std	Y+22, r25	; 0x16
    1d78:	af 8b       	std	Y+23, r26	; 0x17
    1d7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d80:	8f 89       	ldd	r24, Y+23	; 0x17
    1d82:	98 8d       	ldd	r25, Y+24	; 0x18
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d90:	88 23       	and	r24, r24
    1d92:	2c f4       	brge	.+10     	; 0x1d9e <APP_WrongInput+0x32c>
		__ticks = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9c 8b       	std	Y+20, r25	; 0x14
    1d9a:	8b 8b       	std	Y+19, r24	; 0x13
    1d9c:	3f c0       	rjmp	.+126    	; 0x1e1c <APP_WrongInput+0x3aa>
	else if (__tmp > 65535)
    1d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1da0:	7e 89       	ldd	r23, Y+22	; 0x16
    1da2:	8f 89       	ldd	r24, Y+23	; 0x17
    1da4:	98 8d       	ldd	r25, Y+24	; 0x18
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	4c f5       	brge	.+82     	; 0x1e08 <APP_WrongInput+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db6:	69 8d       	ldd	r22, Y+25	; 0x19
    1db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9c 8b       	std	Y+20, r25	; 0x14
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <APP_WrongInput+0x38c>
    1de0:	88 ec       	ldi	r24, 0xC8	; 200
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9a 8b       	std	Y+18, r25	; 0x12
    1de6:	89 8b       	std	Y+17, r24	; 0x11
    1de8:	89 89       	ldd	r24, Y+17	; 0x11
    1dea:	9a 89       	ldd	r25, Y+18	; 0x12
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <APP_WrongInput+0x37a>
    1df0:	9a 8b       	std	Y+18, r25	; 0x12
    1df2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	9c 8b       	std	Y+20, r25	; 0x14
    1dfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1e00:	9c 89       	ldd	r25, Y+20	; 0x14
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	69 f7       	brne	.-38     	; 0x1de0 <APP_WrongInput+0x36e>
    1e06:	14 c0       	rjmp	.+40     	; 0x1e30 <APP_WrongInput+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9c 8b       	std	Y+20, r25	; 0x14
    1e1a:	8b 8b       	std	Y+19, r24	; 0x13
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	98 8b       	std	Y+16, r25	; 0x10
    1e22:	8f 87       	std	Y+15, r24	; 0x0f
    1e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e26:	98 89       	ldd	r25, Y+16	; 0x10
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <APP_WrongInput+0x3b6>
    1e2c:	98 8b       	std	Y+16, r25	; 0x10
    1e2e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(750);
			LCD_clearScreen();
    1e30:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			LCD_displayString("5-for Reset");
    1e34:	88 ea       	ldi	r24, 0xA8	; 168
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>
			LCD_displayString("6-the winner is ?");
    1e44:	84 eb       	ldi	r24, 0xB4	; 180
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e8       	ldi	r25, 0x80	; 128
    1e50:	ab e3       	ldi	r26, 0x3B	; 59
    1e52:	b4 e4       	ldi	r27, 0x44	; 68
    1e54:	8b 87       	std	Y+11, r24	; 0x0b
    1e56:	9c 87       	std	Y+12, r25	; 0x0c
    1e58:	ad 87       	std	Y+13, r26	; 0x0d
    1e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a ef       	ldi	r20, 0xFA	; 250
    1e6a:	54 e4       	ldi	r21, 0x44	; 68
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8f 83       	std	Y+7, r24	; 0x07
    1e76:	98 87       	std	Y+8, r25	; 0x08
    1e78:	a9 87       	std	Y+9, r26	; 0x09
    1e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <APP_WrongInput+0x42c>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <APP_WrongInput+0x4aa>
	else if (__tmp > 65535)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <APP_WrongInput+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <APP_WrongInput+0x48c>
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <APP_WrongInput+0x47a>
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <APP_WrongInput+0x46e>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <APP_WrongInput+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0a:	78 85       	ldd	r23, Y+8	; 0x08
    1f0c:	89 85       	ldd	r24, Y+9	; 0x09
    1f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <APP_WrongInput+0x4b6>
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(750);
			LCD_clearScreen();
    1f30:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
			/* Move to the menu screen again */
			APP_WrongInput();
    1f34:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <APP_WrongInput>
		}
}
    1f38:	e9 96       	adiw	r28, 0x39	; 57
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <APP_Reset>:


/*a function to reset application*/

static void APP_Reset()
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	aa 97       	sbiw	r28, 0x2a	; 42
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
	i=0;
    1f5e:	10 92 64 01 	sts	0x0164, r1
	j=0;
    1f62:	10 92 65 01 	sts	0x0165, r1
	k=0;
    1f66:	10 92 66 01 	sts	0x0166, r1
	L=0;
    1f6a:	10 92 67 01 	sts	0x0167, r1
	LCD_clearScreen();
    1f6e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("Reset.");
    1f72:	84 e0       	ldi	r24, 0x04	; 4
    1f74:	91 e0       	ldi	r25, 0x01	; 1
    1f76:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	aa ef       	ldi	r26, 0xFA	; 250
    1f80:	b3 e4       	ldi	r27, 0x43	; 67
    1f82:	8f a3       	std	Y+39, r24	; 0x27
    1f84:	98 a7       	std	Y+40, r25	; 0x28
    1f86:	a9 a7       	std	Y+41, r26	; 0x29
    1f88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a ef       	ldi	r20, 0xFA	; 250
    1f98:	54 e4       	ldi	r21, 0x44	; 68
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	8b a3       	std	Y+35, r24	; 0x23
    1fa4:	9c a3       	std	Y+36, r25	; 0x24
    1fa6:	ad a3       	std	Y+37, r26	; 0x25
    1fa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1faa:	6b a1       	ldd	r22, Y+35	; 0x23
    1fac:	7c a1       	ldd	r23, Y+36	; 0x24
    1fae:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <APP_Reset+0x82>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9a a3       	std	Y+34, r25	; 0x22
    1fc8:	89 a3       	std	Y+33, r24	; 0x21
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <APP_Reset+0x100>
	else if (__tmp > 65535)
    1fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fce:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <APP_Reset+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	89 a3       	std	Y+33, r24	; 0x21
    200c:	0f c0       	rjmp	.+30     	; 0x202c <APP_Reset+0xe2>
    200e:	88 ec       	ldi	r24, 0xC8	; 200
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	98 a3       	std	Y+32, r25	; 0x20
    2014:	8f 8f       	std	Y+31, r24	; 0x1f
    2016:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2018:	98 a1       	ldd	r25, Y+32	; 0x20
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <APP_Reset+0xd0>
    201e:	98 a3       	std	Y+32, r25	; 0x20
    2020:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	89 a1       	ldd	r24, Y+33	; 0x21
    2024:	9a a1       	ldd	r25, Y+34	; 0x22
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	9a a3       	std	Y+34, r25	; 0x22
    202a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	89 a1       	ldd	r24, Y+33	; 0x21
    202e:	9a a1       	ldd	r25, Y+34	; 0x22
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <APP_Reset+0xc4>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <APP_Reset+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	6b a1       	ldd	r22, Y+35	; 0x23
    2038:	7c a1       	ldd	r23, Y+36	; 0x24
    203a:	8d a1       	ldd	r24, Y+37	; 0x25
    203c:	9e a1       	ldd	r25, Y+38	; 0x26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	9e 8f       	std	Y+30, r25	; 0x1e
    2050:	8d 8f       	std	Y+29, r24	; 0x1d
    2052:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2054:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <APP_Reset+0x10c>
    205a:	9e 8f       	std	Y+30, r25	; 0x1e
    205c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_clearScreen();
    205e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("Reset..");
    2062:	8b e0       	ldi	r24, 0x0B	; 11
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	aa ef       	ldi	r26, 0xFA	; 250
    2070:	b3 e4       	ldi	r27, 0x43	; 67
    2072:	89 8f       	std	Y+25, r24	; 0x19
    2074:	9a 8f       	std	Y+26, r25	; 0x1a
    2076:	ab 8f       	std	Y+27, r26	; 0x1b
    2078:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8d 8b       	std	Y+21, r24	; 0x15
    2094:	9e 8b       	std	Y+22, r25	; 0x16
    2096:	af 8b       	std	Y+23, r26	; 0x17
    2098:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <APP_Reset+0x172>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <APP_Reset+0x1f0>
	else if (__tmp > 65535)
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <APP_Reset+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	69 8d       	ldd	r22, Y+25	; 0x19
    20d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <APP_Reset+0x1d2>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9a 8b       	std	Y+18, r25	; 0x12
    2104:	89 8b       	std	Y+17, r24	; 0x11
    2106:	89 89       	ldd	r24, Y+17	; 0x11
    2108:	9a 89       	ldd	r25, Y+18	; 0x12
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <APP_Reset+0x1c0>
    210e:	9a 8b       	std	Y+18, r25	; 0x12
    2110:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <APP_Reset+0x1b4>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <APP_Reset+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	98 8b       	std	Y+16, r25	; 0x10
    2140:	8f 87       	std	Y+15, r24	; 0x0f
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	98 89       	ldd	r25, Y+16	; 0x10
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <APP_Reset+0x1fc>
    214a:	98 8b       	std	Y+16, r25	; 0x10
    214c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_clearScreen();
    214e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>
	LCD_displayString("Reset...");
    2152:	83 e1       	ldi	r24, 0x13	; 19
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	aa ef       	ldi	r26, 0xFA	; 250
    2160:	b3 e4       	ldi	r27, 0x43	; 67
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    2164:	9c 87       	std	Y+12, r25	; 0x0c
    2166:	ad 87       	std	Y+13, r26	; 0x0d
    2168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6b 85       	ldd	r22, Y+11	; 0x0b
    216c:	7c 85       	ldd	r23, Y+12	; 0x0c
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a ef       	ldi	r20, 0xFA	; 250
    2178:	54 e4       	ldi	r21, 0x44	; 68
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	98 87       	std	Y+8, r25	; 0x08
    2186:	a9 87       	std	Y+9, r26	; 0x09
    2188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <APP_Reset+0x262>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <APP_Reset+0x2e0>
	else if (__tmp > 65535)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <APP_Reset+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <APP_Reset+0x2c2>
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <APP_Reset+0x2b0>
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <APP_Reset+0x2a4>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <APP_Reset+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <APP_Reset+0x2ec>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	APP_WelcomeScreen();
    223e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <APP_WelcomeScreen>
}
    2242:	aa 96       	adiw	r28, 0x2a	; 42
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <APP_Winner>:

/*fucntion to detect who the winer*/
static void APP_Winner()
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
	uint8 winner = i;
    225e:	80 91 64 01 	lds	r24, 0x0164
    2262:	89 83       	std	Y+1, r24	; 0x01
	if(winner<=j)
    2264:	90 91 65 01 	lds	r25, 0x0165
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	98 17       	cp	r25, r24
    226c:	18 f0       	brcs	.+6      	; 0x2274 <APP_Winner+0x20>
		winner=j;
    226e:	80 91 65 01 	lds	r24, 0x0165
    2272:	89 83       	std	Y+1, r24	; 0x01
	if(winner<=k)
    2274:	90 91 66 01 	lds	r25, 0x0166
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	98 17       	cp	r25, r24
    227c:	18 f0       	brcs	.+6      	; 0x2284 <APP_Winner+0x30>
		winner=k;
    227e:	80 91 66 01 	lds	r24, 0x0166
    2282:	89 83       	std	Y+1, r24	; 0x01
	if(winner<=L)
    2284:	90 91 67 01 	lds	r25, 0x0167
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	98 17       	cp	r25, r24
    228c:	18 f0       	brcs	.+6      	; 0x2294 <APP_Winner+0x40>
		winner=L;
    228e:	80 91 67 01 	lds	r24, 0x0167
    2292:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    2294:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_clearScreen>

	if(winner==i)
    2298:	90 91 64 01 	lds	r25, 0x0164
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	89 17       	cp	r24, r25
    22a0:	29 f4       	brne	.+10     	; 0x22ac <APP_Winner+0x58>
		LCD_displayString("The winner is A");
    22a2:	8c e1       	ldi	r24, 0x1C	; 28
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    22aa:	1d c0       	rjmp	.+58     	; 0x22e6 <APP_Winner+0x92>
	else if(winner==j)
    22ac:	90 91 65 01 	lds	r25, 0x0165
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	89 17       	cp	r24, r25
    22b4:	29 f4       	brne	.+10     	; 0x22c0 <APP_Winner+0x6c>
		LCD_displayString("The winner is B");
    22b6:	8c e2       	ldi	r24, 0x2C	; 44
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    22be:	13 c0       	rjmp	.+38     	; 0x22e6 <APP_Winner+0x92>
	else if(winner==k)
    22c0:	90 91 66 01 	lds	r25, 0x0166
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	89 17       	cp	r24, r25
    22c8:	29 f4       	brne	.+10     	; 0x22d4 <APP_Winner+0x80>
			LCD_displayString("The winner is C");
    22ca:	8c e3       	ldi	r24, 0x3C	; 60
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <APP_Winner+0x92>
	else if(winner==L)
    22d4:	90 91 67 01 	lds	r25, 0x0167
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	89 17       	cp	r24, r25
    22dc:	21 f4       	brne	.+8      	; 0x22e6 <APP_Winner+0x92>
			LCD_displayString("The winner is D");
    22de:	8c e4       	ldi	r24, 0x4C	; 76
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>


}
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	27 97       	sbiw	r28, 0x07	; 7
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	6a 83       	std	Y+2, r22	; 0x02
    2306:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	88 30       	cpi	r24, 0x08	; 8
    230c:	08 f0       	brcs	.+2      	; 0x2310 <GPIO_setupPinDirection+0x22>
    230e:	d2 c0       	rjmp	.+420    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	09 f0       	breq	.+2      	; 0x2318 <GPIO_setupPinDirection+0x2a>
    2316:	63 c0       	rjmp	.+198    	; 0x23de <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	3f 83       	std	Y+7, r19	; 0x07
    2320:	2e 83       	std	Y+6, r18	; 0x06
    2322:	8e 81       	ldd	r24, Y+6	; 0x06
    2324:	9f 81       	ldd	r25, Y+7	; 0x07
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	91 05       	cpc	r25, r1
    232a:	e9 f0       	breq	.+58     	; 0x2366 <GPIO_setupPinDirection+0x78>
    232c:	2e 81       	ldd	r18, Y+6	; 0x06
    232e:	3f 81       	ldd	r19, Y+7	; 0x07
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	61 f1       	breq	.+88     	; 0x238e <GPIO_setupPinDirection+0xa0>
    2336:	8e 81       	ldd	r24, Y+6	; 0x06
    2338:	9f 81       	ldd	r25, Y+7	; 0x07
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	e1 f5       	brne	.+120    	; 0x23b6 <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
    233e:	aa e3       	ldi	r26, 0x3A	; 58
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	ea e3       	ldi	r30, 0x3A	; 58
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	48 2f       	mov	r20, r24
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <GPIO_setupPinDirection+0x6e>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <GPIO_setupPinDirection+0x6a>
    2360:	84 2b       	or	r24, r20
    2362:	8c 93       	st	X, r24
    2364:	a7 c0       	rjmp	.+334    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
    2366:	a7 e3       	ldi	r26, 0x37	; 55
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e7 e3       	ldi	r30, 0x37	; 55
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	48 2f       	mov	r20, r24
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	02 2e       	mov	r0, r18
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <GPIO_setupPinDirection+0x96>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	0a 94       	dec	r0
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <GPIO_setupPinDirection+0x92>
    2388:	84 2b       	or	r24, r20
    238a:	8c 93       	st	X, r24
    238c:	93 c0       	rjmp	.+294    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
    238e:	a4 e3       	ldi	r26, 0x34	; 52
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e4 e3       	ldi	r30, 0x34	; 52
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <GPIO_setupPinDirection+0xbe>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <GPIO_setupPinDirection+0xba>
    23b0:	84 2b       	or	r24, r20
    23b2:	8c 93       	st	X, r24
    23b4:	7f c0       	rjmp	.+254    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
    23b6:	a1 e3       	ldi	r26, 0x31	; 49
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e1 e3       	ldi	r30, 0x31	; 49
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <GPIO_setupPinDirection+0xe6>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <GPIO_setupPinDirection+0xe2>
    23d8:	84 2b       	or	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	6b c0       	rjmp	.+214    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	88 23       	and	r24, r24
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <GPIO_setupPinDirection+0xf8>
    23e4:	67 c0       	rjmp	.+206    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	3d 83       	std	Y+5, r19	; 0x05
    23ee:	2c 83       	std	Y+4, r18	; 0x04
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	91 05       	cpc	r25, r1
    23f8:	f9 f0       	breq	.+62     	; 0x2438 <GPIO_setupPinDirection+0x14a>
    23fa:	2c 81       	ldd	r18, Y+4	; 0x04
    23fc:	3d 81       	ldd	r19, Y+5	; 0x05
    23fe:	22 30       	cpi	r18, 0x02	; 2
    2400:	31 05       	cpc	r19, r1
    2402:	79 f1       	breq	.+94     	; 0x2462 <GPIO_setupPinDirection+0x174>
    2404:	8c 81       	ldd	r24, Y+4	; 0x04
    2406:	9d 81       	ldd	r25, Y+5	; 0x05
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	09 f0       	breq	.+2      	; 0x240e <GPIO_setupPinDirection+0x120>
    240c:	3f c0       	rjmp	.+126    	; 0x248c <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
    240e:	aa e3       	ldi	r26, 0x3A	; 58
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	ea e3       	ldi	r30, 0x3A	; 58
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	48 2f       	mov	r20, r24
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	02 2e       	mov	r0, r18
    2426:	02 c0       	rjmp	.+4      	; 0x242c <GPIO_setupPinDirection+0x13e>
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	0a 94       	dec	r0
    242e:	e2 f7       	brpl	.-8      	; 0x2428 <GPIO_setupPinDirection+0x13a>
    2430:	80 95       	com	r24
    2432:	84 23       	and	r24, r20
    2434:	8c 93       	st	X, r24
    2436:	3e c0       	rjmp	.+124    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
    2438:	a7 e3       	ldi	r26, 0x37	; 55
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e7 e3       	ldi	r30, 0x37	; 55
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 2e       	mov	r0, r18
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <GPIO_setupPinDirection+0x168>
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <GPIO_setupPinDirection+0x164>
    245a:	80 95       	com	r24
    245c:	84 23       	and	r24, r20
    245e:	8c 93       	st	X, r24
    2460:	29 c0       	rjmp	.+82     	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
    2462:	a4 e3       	ldi	r26, 0x34	; 52
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e4 e3       	ldi	r30, 0x34	; 52
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <GPIO_setupPinDirection+0x192>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <GPIO_setupPinDirection+0x18e>
    2484:	80 95       	com	r24
    2486:	84 23       	and	r24, r20
    2488:	8c 93       	st	X, r24
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
    248c:	a1 e3       	ldi	r26, 0x31	; 49
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e1 e3       	ldi	r30, 0x31	; 49
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	48 2f       	mov	r20, r24
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	02 2e       	mov	r0, r18
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <GPIO_setupPinDirection+0x1bc>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <GPIO_setupPinDirection+0x1b8>
    24ae:	80 95       	com	r24
    24b0:	84 23       	and	r24, r20
    24b2:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    24b4:	27 96       	adiw	r28, 0x07	; 7
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <GPIO_setupPortDirection+0x6>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <GPIO_setupPortDirection+0x8>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	84 30       	cpi	r24, 0x04	; 4
    24da:	30 f5       	brcc	.+76     	; 0x2528 <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	3c 83       	std	Y+4, r19	; 0x04
    24e4:	2b 83       	std	Y+3, r18	; 0x03
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	91 05       	cpc	r25, r1
    24ee:	71 f0       	breq	.+28     	; 0x250c <GPIO_setupPortDirection+0x46>
    24f0:	2b 81       	ldd	r18, Y+3	; 0x03
    24f2:	3c 81       	ldd	r19, Y+4	; 0x04
    24f4:	22 30       	cpi	r18, 0x02	; 2
    24f6:	31 05       	cpc	r19, r1
    24f8:	71 f0       	breq	.+28     	; 0x2516 <GPIO_setupPortDirection+0x50>
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	79 f4       	brne	.+30     	; 0x2520 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
    2502:	ea e3       	ldi	r30, 0x3A	; 58
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	80 83       	st	Z, r24
    250a:	0e c0       	rjmp	.+28     	; 0x2528 <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
    250c:	e7 e3       	ldi	r30, 0x37	; 55
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	80 83       	st	Z, r24
    2514:	09 c0       	rjmp	.+18     	; 0x2528 <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
    2516:	e4 e3       	ldi	r30, 0x34	; 52
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	80 83       	st	Z, r24
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
    2520:	e1 e3       	ldi	r30, 0x31	; 49
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	80 83       	st	Z, r24
			break;
		}
	}
}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	27 97       	sbiw	r28, 0x07	; 7
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	6a 83       	std	Y+2, r22	; 0x02
    254e:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	88 30       	cpi	r24, 0x08	; 8
    2554:	08 f0       	brcs	.+2      	; 0x2558 <GPIO_writePin+0x22>
    2556:	d9 c0       	rjmp	.+434    	; 0x270a <GPIO_writePin+0x1d4>
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	21 f0       	breq	.+8      	; 0x2566 <GPIO_writePin+0x30>
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	88 23       	and	r24, r24
    2562:	09 f0       	breq	.+2      	; 0x2566 <GPIO_writePin+0x30>
    2564:	d2 c0       	rjmp	.+420    	; 0x270a <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	09 f0       	breq	.+2      	; 0x256e <GPIO_writePin+0x38>
    256c:	63 c0       	rjmp	.+198    	; 0x2634 <GPIO_writePin+0xfe>
		{
			switch(port_num)
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	3f 83       	std	Y+7, r19	; 0x07
    2576:	2e 83       	std	Y+6, r18	; 0x06
    2578:	8e 81       	ldd	r24, Y+6	; 0x06
    257a:	9f 81       	ldd	r25, Y+7	; 0x07
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	91 05       	cpc	r25, r1
    2580:	e9 f0       	breq	.+58     	; 0x25bc <GPIO_writePin+0x86>
    2582:	2e 81       	ldd	r18, Y+6	; 0x06
    2584:	3f 81       	ldd	r19, Y+7	; 0x07
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	61 f1       	breq	.+88     	; 0x25e4 <GPIO_writePin+0xae>
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	9f 81       	ldd	r25, Y+7	; 0x07
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	e1 f5       	brne	.+120    	; 0x260c <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    2594:	ab e3       	ldi	r26, 0x3B	; 59
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	eb e3       	ldi	r30, 0x3B	; 59
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	48 2f       	mov	r20, r24
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	02 2e       	mov	r0, r18
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <GPIO_writePin+0x7c>
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	0a 94       	dec	r0
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <GPIO_writePin+0x78>
    25b6:	84 2b       	or	r24, r20
    25b8:	8c 93       	st	X, r24
    25ba:	a7 c0       	rjmp	.+334    	; 0x270a <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    25bc:	a8 e3       	ldi	r26, 0x38	; 56
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e8 e3       	ldi	r30, 0x38	; 56
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	48 2f       	mov	r20, r24
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	02 2e       	mov	r0, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <GPIO_writePin+0xa4>
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	0a 94       	dec	r0
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <GPIO_writePin+0xa0>
    25de:	84 2b       	or	r24, r20
    25e0:	8c 93       	st	X, r24
    25e2:	93 c0       	rjmp	.+294    	; 0x270a <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    25e4:	a5 e3       	ldi	r26, 0x35	; 53
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e5 e3       	ldi	r30, 0x35	; 53
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	48 2f       	mov	r20, r24
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 2e       	mov	r0, r18
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <GPIO_writePin+0xcc>
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	0a 94       	dec	r0
    2604:	e2 f7       	brpl	.-8      	; 0x25fe <GPIO_writePin+0xc8>
    2606:	84 2b       	or	r24, r20
    2608:	8c 93       	st	X, r24
    260a:	7f c0       	rjmp	.+254    	; 0x270a <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    260c:	a2 e3       	ldi	r26, 0x32	; 50
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e2 e3       	ldi	r30, 0x32	; 50
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	48 2f       	mov	r20, r24
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	02 2e       	mov	r0, r18
    2624:	02 c0       	rjmp	.+4      	; 0x262a <GPIO_writePin+0xf4>
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	0a 94       	dec	r0
    262c:	e2 f7       	brpl	.-8      	; 0x2626 <GPIO_writePin+0xf0>
    262e:	84 2b       	or	r24, r20
    2630:	8c 93       	st	X, r24
    2632:	6b c0       	rjmp	.+214    	; 0x270a <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	88 23       	and	r24, r24
    2638:	09 f0       	breq	.+2      	; 0x263c <GPIO_writePin+0x106>
    263a:	67 c0       	rjmp	.+206    	; 0x270a <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	3d 83       	std	Y+5, r19	; 0x05
    2644:	2c 83       	std	Y+4, r18	; 0x04
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	9d 81       	ldd	r25, Y+5	; 0x05
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	91 05       	cpc	r25, r1
    264e:	f9 f0       	breq	.+62     	; 0x268e <GPIO_writePin+0x158>
    2650:	2c 81       	ldd	r18, Y+4	; 0x04
    2652:	3d 81       	ldd	r19, Y+5	; 0x05
    2654:	22 30       	cpi	r18, 0x02	; 2
    2656:	31 05       	cpc	r19, r1
    2658:	79 f1       	breq	.+94     	; 0x26b8 <GPIO_writePin+0x182>
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	9d 81       	ldd	r25, Y+5	; 0x05
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	09 f0       	breq	.+2      	; 0x2664 <GPIO_writePin+0x12e>
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    2664:	ab e3       	ldi	r26, 0x3B	; 59
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	eb e3       	ldi	r30, 0x3B	; 59
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	48 2f       	mov	r20, r24
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	02 2e       	mov	r0, r18
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <GPIO_writePin+0x14c>
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	0a 94       	dec	r0
    2684:	e2 f7       	brpl	.-8      	; 0x267e <GPIO_writePin+0x148>
    2686:	80 95       	com	r24
    2688:	84 23       	and	r24, r20
    268a:	8c 93       	st	X, r24
    268c:	3e c0       	rjmp	.+124    	; 0x270a <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    268e:	a8 e3       	ldi	r26, 0x38	; 56
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e8 e3       	ldi	r30, 0x38	; 56
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	48 2f       	mov	r20, r24
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	02 2e       	mov	r0, r18
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <GPIO_writePin+0x176>
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	0a 94       	dec	r0
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <GPIO_writePin+0x172>
    26b0:	80 95       	com	r24
    26b2:	84 23       	and	r24, r20
    26b4:	8c 93       	st	X, r24
    26b6:	29 c0       	rjmp	.+82     	; 0x270a <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    26b8:	a5 e3       	ldi	r26, 0x35	; 53
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e3       	ldi	r30, 0x35	; 53
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	48 2f       	mov	r20, r24
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 2e       	mov	r0, r18
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <GPIO_writePin+0x1a0>
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	0a 94       	dec	r0
    26d8:	e2 f7       	brpl	.-8      	; 0x26d2 <GPIO_writePin+0x19c>
    26da:	80 95       	com	r24
    26dc:	84 23       	and	r24, r20
    26de:	8c 93       	st	X, r24
    26e0:	14 c0       	rjmp	.+40     	; 0x270a <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    26e2:	a2 e3       	ldi	r26, 0x32	; 50
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e2 e3       	ldi	r30, 0x32	; 50
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	48 2f       	mov	r20, r24
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	02 2e       	mov	r0, r18
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <GPIO_writePin+0x1ca>
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	0a 94       	dec	r0
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <GPIO_writePin+0x1c6>
    2704:	80 95       	com	r24
    2706:	84 23       	and	r24, r20
    2708:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    270a:	27 96       	adiw	r28, 0x07	; 7
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,GPIO_PinDirectionType direction)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	00 d0       	rcall	.+0      	; 0x2722 <GPIO_writePort+0x6>
    2722:	00 d0       	rcall	.+0      	; 0x2724 <GPIO_writePort+0x8>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	84 30       	cpi	r24, 0x04	; 4
    2730:	30 f5       	brcc	.+76     	; 0x277e <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	3c 83       	std	Y+4, r19	; 0x04
    273a:	2b 83       	std	Y+3, r18	; 0x03
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	91 05       	cpc	r25, r1
    2744:	71 f0       	breq	.+28     	; 0x2762 <GPIO_writePort+0x46>
    2746:	2b 81       	ldd	r18, Y+3	; 0x03
    2748:	3c 81       	ldd	r19, Y+4	; 0x04
    274a:	22 30       	cpi	r18, 0x02	; 2
    274c:	31 05       	cpc	r19, r1
    274e:	71 f0       	breq	.+28     	; 0x276c <GPIO_writePort+0x50>
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	79 f4       	brne	.+30     	; 0x2776 <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    2758:	eb e3       	ldi	r30, 0x3B	; 59
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	80 83       	st	Z, r24
    2760:	0e c0       	rjmp	.+28     	; 0x277e <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    2762:	e8 e3       	ldi	r30, 0x38	; 56
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	80 83       	st	Z, r24
    276a:	09 c0       	rjmp	.+18     	; 0x277e <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    276c:	e5 e3       	ldi	r30, 0x35	; 53
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	80 83       	st	Z, r24
    2774:	04 c0       	rjmp	.+8      	; 0x277e <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    2776:	e2 e3       	ldi	r30, 0x32	; 50
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	80 83       	st	Z, r24
			break;
		}
	}
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	00 d0       	rcall	.+0      	; 0x2792 <GPIO_readPin+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <GPIO_readPin+0x8>
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	88 30       	cpi	r24, 0x08	; 8
    27a2:	10 f0       	brcs	.+4      	; 0x27a8 <GPIO_readPin+0x1c>
	{
		return 0;
    27a4:	1d 82       	std	Y+5, r1	; 0x05
    27a6:	5f c0       	rjmp	.+190    	; 0x2866 <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	3c 83       	std	Y+4, r19	; 0x04
    27b0:	2b 83       	std	Y+3, r18	; 0x03
    27b2:	4b 81       	ldd	r20, Y+3	; 0x03
    27b4:	5c 81       	ldd	r21, Y+4	; 0x04
    27b6:	41 30       	cpi	r20, 0x01	; 1
    27b8:	51 05       	cpc	r21, r1
    27ba:	e9 f0       	breq	.+58     	; 0x27f6 <GPIO_readPin+0x6a>
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	91 05       	cpc	r25, r1
    27c4:	59 f1       	breq	.+86     	; 0x281c <GPIO_readPin+0x90>
    27c6:	2b 81       	ldd	r18, Y+3	; 0x03
    27c8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ca:	21 15       	cp	r18, r1
    27cc:	31 05       	cpc	r19, r1
    27ce:	c9 f5       	brne	.+114    	; 0x2842 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    27d0:	e9 e3       	ldi	r30, 0x39	; 57
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a9 01       	movw	r20, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <GPIO_readPin+0x5c>
    27e4:	55 95       	asr	r21
    27e6:	47 95       	ror	r20
    27e8:	8a 95       	dec	r24
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <GPIO_readPin+0x58>
    27ec:	ca 01       	movw	r24, r20
    27ee:	58 2f       	mov	r21, r24
    27f0:	51 70       	andi	r21, 0x01	; 1
    27f2:	5d 83       	std	Y+5, r21	; 0x05
    27f4:	38 c0       	rjmp	.+112    	; 0x2866 <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    27f6:	e6 e3       	ldi	r30, 0x36	; 54
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	88 2f       	mov	r24, r24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a9 01       	movw	r20, r18
    2808:	02 c0       	rjmp	.+4      	; 0x280e <GPIO_readPin+0x82>
    280a:	55 95       	asr	r21
    280c:	47 95       	ror	r20
    280e:	8a 95       	dec	r24
    2810:	e2 f7       	brpl	.-8      	; 0x280a <GPIO_readPin+0x7e>
    2812:	ca 01       	movw	r24, r20
    2814:	58 2f       	mov	r21, r24
    2816:	51 70       	andi	r21, 0x01	; 1
    2818:	5d 83       	std	Y+5, r21	; 0x05
    281a:	25 c0       	rjmp	.+74     	; 0x2866 <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    281c:	e3 e3       	ldi	r30, 0x33	; 51
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a9 01       	movw	r20, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <GPIO_readPin+0xa8>
    2830:	55 95       	asr	r21
    2832:	47 95       	ror	r20
    2834:	8a 95       	dec	r24
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <GPIO_readPin+0xa4>
    2838:	ca 01       	movw	r24, r20
    283a:	58 2f       	mov	r21, r24
    283c:	51 70       	andi	r21, 0x01	; 1
    283e:	5d 83       	std	Y+5, r21	; 0x05
    2840:	12 c0       	rjmp	.+36     	; 0x2866 <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    2842:	e0 e3       	ldi	r30, 0x30	; 48
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a9 01       	movw	r20, r18
    2854:	02 c0       	rjmp	.+4      	; 0x285a <GPIO_readPin+0xce>
    2856:	55 95       	asr	r21
    2858:	47 95       	ror	r20
    285a:	8a 95       	dec	r24
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <GPIO_readPin+0xca>
    285e:	ca 01       	movw	r24, r20
    2860:	58 2f       	mov	r21, r24
    2862:	51 70       	andi	r21, 0x01	; 1
    2864:	5d 83       	std	Y+5, r21	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <GPIO_readPort+0x6>
    287e:	00 d0       	rcall	.+0      	; 0x2880 <GPIO_readPort+0x8>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	84 30       	cpi	r24, 0x04	; 4
    288a:	10 f0       	brcs	.+4      	; 0x2890 <GPIO_readPort+0x18>
	{
		return 0;
    288c:	1c 82       	std	Y+4, r1	; 0x04
    288e:	26 c0       	rjmp	.+76     	; 0x28dc <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	3b 83       	std	Y+3, r19	; 0x03
    2898:	2a 83       	std	Y+2, r18	; 0x02
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	91 05       	cpc	r25, r1
    28a2:	71 f0       	breq	.+28     	; 0x28c0 <GPIO_readPort+0x48>
    28a4:	2a 81       	ldd	r18, Y+2	; 0x02
    28a6:	3b 81       	ldd	r19, Y+3	; 0x03
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	71 f0       	breq	.+28     	; 0x28ca <GPIO_readPort+0x52>
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	79 f4       	brne	.+30     	; 0x28d4 <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    28b6:	e9 e3       	ldi	r30, 0x39	; 57
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	90 81       	ld	r25, Z
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    28be:	0e c0       	rjmp	.+28     	; 0x28dc <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    28c0:	e6 e3       	ldi	r30, 0x36	; 54
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	20 81       	ld	r18, Z
    28c6:	2c 83       	std	Y+4, r18	; 0x04
    28c8:	09 c0       	rjmp	.+18     	; 0x28dc <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    28ca:	e3 e3       	ldi	r30, 0x33	; 51
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	30 81       	ld	r19, Z
    28d0:	3c 83       	std	Y+4, r19	; 0x04
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <GPIO_readPort+0x64>
		default:
			return PINC;
    28d4:	e3 e3       	ldi	r30, 0x33	; 51
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	8c 83       	std	Y+4, r24	; 0x04
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <GRN_LED_init>:
/*
 * Description :
 * A function to initialize the GRN_LED
 */
void GRN_LED_init(void)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	/*Make the GRNLED pin output pin*/
	GPIO_setupPinDirection(GRN_LED_PORT,GRN_LED_PIN,PIN_OUTPUT);
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	61 e0       	ldi	r22, 0x01	; 1
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>

	/*Turn off the GRN_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_INPUT);
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
}
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <GRN_LED_on>:
/*
 * Description :
 * A function to turn on the GRN_LED
 */
void GRN_LED_on(void)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the RED_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_OUTPUT);
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
}
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <GRN_LED_off>:
/*
 * Description :
 * A function to turn off theGRN_LED
 */
void GRN_LED_off(void)
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the RED_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_INPUT);
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <KEYPAD_getPressedKey+0x6>
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	64 e0       	ldi	r22, 0x04	; 4
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	65 e0       	ldi	r22, 0x05	; 5
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	66 e0       	ldi	r22, 0x06	; 6
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	67 e0       	ldi	r22, 0x07	; 7
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	62 e0       	ldi	r22, 0x02	; 2
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    297a:	83 e0       	ldi	r24, 0x03	; 3
    297c:	63 e0       	ldi	r22, 0x03	; 3
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	64 e0       	ldi	r22, 0x04	; 4
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
#if (KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	65 e0       	ldi	r22, 0x05	; 5
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    2998:	1a 82       	std	Y+2, r1	; 0x02
    299a:	3c c0       	rjmp	.+120    	; 0x2a14 <KEYPAD_getPressedKey+0xd6>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	98 2f       	mov	r25, r24
    29a0:	9c 5f       	subi	r25, 0xFC	; 252
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	69 2f       	mov	r22, r25
    29a6:	41 e0       	ldi	r20, 0x01	; 1
    29a8:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	98 2f       	mov	r25, r24
    29b0:	9c 5f       	subi	r25, 0xFC	; 252
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	69 2f       	mov	r22, r25
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    29bc:	19 82       	std	Y+1, r1	; 0x01
    29be:	1c c0       	rjmp	.+56     	; 0x29f8 <KEYPAD_getPressedKey+0xba>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	98 2f       	mov	r25, r24
    29c4:	9e 5f       	subi	r25, 0xFE	; 254
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	69 2f       	mov	r22, r25
    29ca:	0e 94 c6 13 	call	0x278c	; 0x278c <GPIO_readPin>
    29ce:	88 23       	and	r24, r24
    29d0:	81 f4       	brne	.+32     	; 0x29f2 <KEYPAD_getPressedKey+0xb4>
					#endif

					#elif (KEYPAD_NUM_COLS == 4)

					#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	98 2f       	mov	r25, r24
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	89 0f       	add	r24, r25
    29e6:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	84 30       	cpi	r24, 0x04	; 4
    29fc:	08 f3       	brcs	.-62     	; 0x29c0 <KEYPAD_getPressedKey+0x82>
					#endif
					#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	98 2f       	mov	r25, r24
    2a02:	9c 5f       	subi	r25, 0xFC	; 252
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	69 2f       	mov	r22, r25
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	8f 5f       	subi	r24, 0xFF	; 255
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	84 30       	cpi	r24, 0x04	; 4
    2a18:	08 f2       	brcs	.-126    	; 0x299c <KEYPAD_getPressedKey+0x5e>
    2a1a:	be cf       	rjmp	.-132    	; 0x2998 <KEYPAD_getPressedKey+0x5a>

00002a1c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	6c 97       	sbiw	r28, 0x1c	; 28
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	61 e0       	ldi	r22, 0x01	; 1
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	62 e0       	ldi	r22, 0x02	; 2
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	0e 94 77 11 	call	0x22ee	; 0x22ee <GPIO_setupPinDirection>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 ea       	ldi	r26, 0xA0	; 160
    2a4a:	b1 e4       	ldi	r27, 0x41	; 65
    2a4c:	89 8f       	std	Y+25, r24	; 0x19
    2a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a50:	ab 8f       	std	Y+27, r26	; 0x1b
    2a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	69 8d       	ldd	r22, Y+25	; 0x19
    2a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a ef       	ldi	r20, 0xFA	; 250
    2a62:	54 e4       	ldi	r21, 0x44	; 68
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	8d 8b       	std	Y+21, r24	; 0x15
    2a6e:	9e 8b       	std	Y+22, r25	; 0x16
    2a70:	af 8b       	std	Y+23, r26	; 0x17
    2a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a74:	6d 89       	ldd	r22, Y+21	; 0x15
    2a76:	7e 89       	ldd	r23, Y+22	; 0x16
    2a78:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <LCD_init+0x7a>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9c 8b       	std	Y+20, r25	; 0x14
    2a92:	8b 8b       	std	Y+19, r24	; 0x13
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2a96:	6d 89       	ldd	r22, Y+21	; 0x15
    2a98:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <LCD_init+0xda>
    2ad8:	88 ec       	ldi	r24, 0xC8	; 200
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9a 8b       	std	Y+18, r25	; 0x12
    2ade:	89 8b       	std	Y+17, r24	; 0x11
    2ae0:	89 89       	ldd	r24, Y+17	; 0x11
    2ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_init+0xc8>
    2ae8:	9a 8b       	std	Y+18, r25	; 0x12
    2aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <LCD_init+0xbc>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	6d 89       	ldd	r22, Y+21	; 0x15
    2b02:	7e 89       	ldd	r23, Y+22	; 0x16
    2b04:	8f 89       	ldd	r24, Y+23	; 0x17
    2b06:	98 8d       	ldd	r25, Y+24	; 0x18
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
    2b12:	8b 8b       	std	Y+19, r24	; 0x13
    2b14:	8b 89       	ldd	r24, Y+19	; 0x13
    2b16:	9c 89       	ldd	r25, Y+20	; 0x14
    2b18:	98 8b       	std	Y+16, r25	; 0x10
    2b1a:	8f 87       	std	Y+15, r24	; 0x0f
    2b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1e:	98 89       	ldd	r25, Y+16	; 0x10
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <LCD_init+0x104>
    2b24:	98 8b       	std	Y+16, r25	; 0x10
    2b26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

#if(LCD_BIT_MODE == 8)
	/* 2 - Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	6f ef       	ldi	r22, 0xFF	; 255
    2b2c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <GPIO_setupPortDirection>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 ea       	ldi	r26, 0xA0	; 160
    2b36:	b1 e4       	ldi	r27, 0x41	; 65
    2b38:	8b 87       	std	Y+11, r24	; 0x0b
    2b3a:	9c 87       	std	Y+12, r25	; 0x0c
    2b3c:	ad 87       	std	Y+13, r26	; 0x0d
    2b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a ef       	ldi	r20, 0xFA	; 250
    2b4e:	54 e4       	ldi	r21, 0x44	; 68
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	8f 83       	std	Y+7, r24	; 0x07
    2b5a:	98 87       	std	Y+8, r25	; 0x08
    2b5c:	a9 87       	std	Y+9, r26	; 0x09
    2b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	2c f4       	brge	.+10     	; 0x2b82 <LCD_init+0x166>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	3f c0       	rjmp	.+126    	; 0x2c00 <LCD_init+0x1e4>
	else if (__tmp > 65535)
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	3f ef       	ldi	r19, 0xFF	; 255
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	57 e4       	ldi	r21, 0x47	; 71
    2b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	4c f5       	brge	.+82     	; 0x2bec <LCD_init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <LCD_init+0x1c6>
    2bc4:	88 ec       	ldi	r24, 0xC8	; 200
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9c 83       	std	Y+4, r25	; 0x04
    2bca:	8b 83       	std	Y+3, r24	; 0x03
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <LCD_init+0x1b4>
    2bd4:	9c 83       	std	Y+4, r25	; 0x04
    2bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bda:	9e 81       	ldd	r25, Y+6	; 0x06
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <LCD_init+0x1a8>
    2bea:	14 c0       	rjmp	.+40     	; 0x2c14 <LCD_init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bec:	6f 81       	ldd	r22, Y+7	; 0x07
    2bee:	78 85       	ldd	r23, Y+8	; 0x08
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e 83       	std	Y+6, r25	; 0x06
    2bfe:	8d 83       	std	Y+5, r24	; 0x05
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <LCD_init+0x1f0>
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 4 - send command 2 lines 8 bits*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2c14:	88 e3       	ldi	r24, 0x38	; 56
    2c16:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    2c1a:	8c e0       	ldi	r24, 0x0C	; 12
    2c1c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_sendCommand>
}
    2c26:	6c 96       	adiw	r28, 0x1c	; 28
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	c1 56       	subi	r28, 0x61	; 97
    2c46:	d0 40       	sbci	r29, 0x00	; 0
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	fe 01       	movw	r30, r28
    2c54:	ef 59       	subi	r30, 0x9F	; 159
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
    2c64:	fe 01       	movw	r30, r28
    2c66:	e3 5a       	subi	r30, 0xA3	; 163
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e8       	ldi	r26, 0x80	; 128
    2c70:	bf e3       	ldi	r27, 0x3F	; 63
    2c72:	80 83       	st	Z, r24
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	a2 83       	std	Z+2, r26	; 0x02
    2c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c7a:	8e 01       	movw	r16, r28
    2c7c:	07 5a       	subi	r16, 0xA7	; 167
    2c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	e3 5a       	subi	r30, 0xA3	; 163
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	2b ea       	ldi	r18, 0xAB	; 171
    2c90:	3a ea       	ldi	r19, 0xAA	; 170
    2c92:	4a e2       	ldi	r20, 0x2A	; 42
    2c94:	50 e4       	ldi	r21, 0x40	; 64
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	80 83       	st	Z, r24
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	a2 83       	std	Z+2, r26	; 0x02
    2ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e7 5a       	subi	r30, 0xA7	; 167
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e8       	ldi	r20, 0x80	; 128
    2cbc:	5f e3       	ldi	r21, 0x3F	; 63
    2cbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc2:	88 23       	and	r24, r24
    2cc4:	34 f4       	brge	.+12     	; 0x2cd2 <LCD_sendCommand+0x9a>
		__ticks = 1;
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e8 5a       	subi	r30, 0xA8	; 168
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	80 83       	st	Z, r24
    2cd0:	e0 c0       	rjmp	.+448    	; 0x2e92 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e7 5a       	subi	r30, 0xA7	; 167
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	53 e4       	ldi	r21, 0x43	; 67
    2ce8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cec:	18 16       	cp	r1, r24
    2cee:	0c f0       	brlt	.+2      	; 0x2cf2 <LCD_sendCommand+0xba>
    2cf0:	c0 c0       	rjmp	.+384    	; 0x2e72 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e3 5a       	subi	r30, 0xA3	; 163
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a e7       	ldi	r20, 0x7A	; 122
    2d06:	54 e4       	ldi	r21, 0x44	; 68
    2d08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	fe 01       	movw	r30, r28
    2d12:	ec 5a       	subi	r30, 0xAC	; 172
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 83       	st	Z, r24
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	a2 83       	std	Z+2, r26	; 0x02
    2d1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1e:	8e 01       	movw	r16, r28
    2d20:	00 5b       	subi	r16, 0xB0	; 176
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	fe 01       	movw	r30, r28
    2d26:	ec 5a       	subi	r30, 0xAC	; 172
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	4a ef       	ldi	r20, 0xFA	; 250
    2d38:	54 e4       	ldi	r21, 0x44	; 68
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 83       	st	Z, r24
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	a2 83       	std	Z+2, r26	; 0x02
    2d4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e0 5b       	subi	r30, 0xB0	; 176
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e8       	ldi	r20, 0x80	; 128
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d66:	88 23       	and	r24, r24
    2d68:	44 f4       	brge	.+16     	; 0x2d7a <LCD_sendCommand+0x142>
		__ticks = 1;
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e2 5b       	subi	r30, 0xB2	; 178
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	80 83       	st	Z, r24
    2d78:	64 c0       	rjmp	.+200    	; 0x2e42 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e0 5b       	subi	r30, 0xB0	; 176
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	0c f0       	brlt	.+2      	; 0x2d9a <LCD_sendCommand+0x162>
    2d98:	43 c0       	rjmp	.+134    	; 0x2e20 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ec 5a       	subi	r30, 0xAC	; 172
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	8e 01       	movw	r16, r28
    2dba:	02 5b       	subi	r16, 0xB2	; 178
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	f8 01       	movw	r30, r16
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
    2dd0:	1f c0       	rjmp	.+62     	; 0x2e10 <LCD_sendCommand+0x1d8>
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e4 5b       	subi	r30, 0xB4	; 180
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	88 ec       	ldi	r24, 0xC8	; 200
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	fe 01       	movw	r30, r28
    2de2:	e4 5b       	subi	r30, 0xB4	; 180
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <LCD_sendCommand+0x1b2>
    2dee:	fe 01       	movw	r30, r28
    2df0:	e4 5b       	subi	r30, 0xB4	; 180
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	de 01       	movw	r26, r28
    2dfa:	a2 5b       	subi	r26, 0xB2	; 178
    2dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e2 5b       	subi	r30, 0xB2	; 178
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	11 96       	adiw	r26, 0x01	; 1
    2e0c:	9c 93       	st	X, r25
    2e0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	fe 01       	movw	r30, r28
    2e12:	e2 5b       	subi	r30, 0xB2	; 178
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	d1 f6       	brne	.-76     	; 0x2dd2 <LCD_sendCommand+0x19a>
    2e1e:	4b c0       	rjmp	.+150    	; 0x2eb6 <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	8e 01       	movw	r16, r28
    2e22:	02 5b       	subi	r16, 0xB2	; 178
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e0 5b       	subi	r30, 0xB0	; 176
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	60 81       	ld	r22, Z
    2e2e:	71 81       	ldd	r23, Z+1	; 0x01
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	f8 01       	movw	r30, r16
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    2e42:	de 01       	movw	r26, r28
    2e44:	a6 5b       	subi	r26, 0xB6	; 182
    2e46:	bf 4f       	sbci	r27, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e2 5b       	subi	r30, 0xB2	; 178
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	11 96       	adiw	r26, 0x01	; 1
    2e54:	9c 93       	st	X, r25
    2e56:	8e 93       	st	-X, r24
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e6 5b       	subi	r30, 0xB6	; 182
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <LCD_sendCommand+0x22a>
    2e66:	fe 01       	movw	r30, r28
    2e68:	e6 5b       	subi	r30, 0xB6	; 182
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	22 c0       	rjmp	.+68     	; 0x2eb6 <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e72:	8e 01       	movw	r16, r28
    2e74:	08 5a       	subi	r16, 0xA8	; 168
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e7 5a       	subi	r30, 0xA7	; 167
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	f8 01       	movw	r30, r16
    2e90:	80 83       	st	Z, r24
    2e92:	de 01       	movw	r26, r28
    2e94:	a7 5b       	subi	r26, 0xB7	; 183
    2e96:	bf 4f       	sbci	r27, 0xFF	; 255
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e8 5a       	subi	r30, 0xA8	; 168
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e7 5b       	subi	r30, 0xB7	; 183
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	8a 95       	dec	r24
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LCD_sendCommand+0x272>
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e7 5b       	subi	r30, 0xB7	; 183
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	62 e0       	ldi	r22, 0x02	; 2
    2eba:	41 e0       	ldi	r20, 0x01	; 1
    2ebc:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	eb 5b       	subi	r30, 0xBB	; 187
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a0 e8       	ldi	r26, 0x80	; 128
    2ecc:	bf e3       	ldi	r27, 0x3F	; 63
    2ece:	80 83       	st	Z, r24
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	a2 83       	std	Z+2, r26	; 0x02
    2ed4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ed6:	8e 01       	movw	r16, r28
    2ed8:	0f 5b       	subi	r16, 0xBF	; 191
    2eda:	1f 4f       	sbci	r17, 0xFF	; 255
    2edc:	fe 01       	movw	r30, r28
    2ede:	eb 5b       	subi	r30, 0xBB	; 187
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	2b ea       	ldi	r18, 0xAB	; 171
    2eec:	3a ea       	ldi	r19, 0xAA	; 170
    2eee:	4a e2       	ldi	r20, 0x2A	; 42
    2ef0:	50 e4       	ldi	r21, 0x40	; 64
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	f8 01       	movw	r30, r16
    2efc:	80 83       	st	Z, r24
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	a2 83       	std	Z+2, r26	; 0x02
    2f02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f04:	fe 01       	movw	r30, r28
    2f06:	ef 5b       	subi	r30, 0xBF	; 191
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	60 81       	ld	r22, Z
    2f0c:	71 81       	ldd	r23, Z+1	; 0x01
    2f0e:	82 81       	ldd	r24, Z+2	; 0x02
    2f10:	93 81       	ldd	r25, Z+3	; 0x03
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	34 f4       	brge	.+12     	; 0x2f2e <LCD_sendCommand+0x2f6>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	fe 01       	movw	r30, r28
    2f26:	e0 5c       	subi	r30, 0xC0	; 192
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 83       	st	Z, r24
    2f2c:	9d c0       	rjmp	.+314    	; 0x3068 <LCD_sendCommand+0x430>
	else if (__tmp > 255)
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ef 5b       	subi	r30, 0xBF	; 191
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	53 e4       	ldi	r21, 0x43	; 67
    2f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	0c f0       	brlt	.+2      	; 0x2f4e <LCD_sendCommand+0x316>
    2f4c:	7e c0       	rjmp	.+252    	; 0x304a <LCD_sendCommand+0x412>
	{
		_delay_ms(__us / 1000.0);
    2f4e:	fe 01       	movw	r30, r28
    2f50:	eb 5b       	subi	r30, 0xBB	; 187
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a e7       	ldi	r20, 0x7A	; 122
    2f62:	54 e4       	ldi	r21, 0x44	; 68
    2f64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8c af       	std	Y+60, r24	; 0x3c
    2f6e:	9d af       	std	Y+61, r25	; 0x3d
    2f70:	ae af       	std	Y+62, r26	; 0x3e
    2f72:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f74:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f76:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f78:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	4a ef       	ldi	r20, 0xFA	; 250
    2f82:	54 e4       	ldi	r21, 0x44	; 68
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	88 af       	std	Y+56, r24	; 0x38
    2f8e:	99 af       	std	Y+57, r25	; 0x39
    2f90:	aa af       	std	Y+58, r26	; 0x3a
    2f92:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2f94:	68 ad       	ldd	r22, Y+56	; 0x38
    2f96:	79 ad       	ldd	r23, Y+57	; 0x39
    2f98:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f9a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e8       	ldi	r20, 0x80	; 128
    2fa2:	5f e3       	ldi	r21, 0x3F	; 63
    2fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa8:	88 23       	and	r24, r24
    2faa:	2c f4       	brge	.+10     	; 0x2fb6 <LCD_sendCommand+0x37e>
		__ticks = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9f ab       	std	Y+55, r25	; 0x37
    2fb2:	8e ab       	std	Y+54, r24	; 0x36
    2fb4:	3f c0       	rjmp	.+126    	; 0x3034 <LCD_sendCommand+0x3fc>
	else if (__tmp > 65535)
    2fb6:	68 ad       	ldd	r22, Y+56	; 0x38
    2fb8:	79 ad       	ldd	r23, Y+57	; 0x39
    2fba:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fbc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	3f ef       	ldi	r19, 0xFF	; 255
    2fc2:	4f e7       	ldi	r20, 0x7F	; 127
    2fc4:	57 e4       	ldi	r21, 0x47	; 71
    2fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	4c f5       	brge	.+82     	; 0x3020 <LCD_sendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fce:	6c ad       	ldd	r22, Y+60	; 0x3c
    2fd0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2fd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	51 e4       	ldi	r21, 0x41	; 65
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9f ab       	std	Y+55, r25	; 0x37
    2ff4:	8e ab       	std	Y+54, r24	; 0x36
    2ff6:	0f c0       	rjmp	.+30     	; 0x3016 <LCD_sendCommand+0x3de>
    2ff8:	88 ec       	ldi	r24, 0xC8	; 200
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9d ab       	std	Y+53, r25	; 0x35
    2ffe:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3000:	8c a9       	ldd	r24, Y+52	; 0x34
    3002:	9d a9       	ldd	r25, Y+53	; 0x35
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <LCD_sendCommand+0x3cc>
    3008:	9d ab       	std	Y+53, r25	; 0x35
    300a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300c:	8e a9       	ldd	r24, Y+54	; 0x36
    300e:	9f a9       	ldd	r25, Y+55	; 0x37
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	9f ab       	std	Y+55, r25	; 0x37
    3014:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3016:	8e a9       	ldd	r24, Y+54	; 0x36
    3018:	9f a9       	ldd	r25, Y+55	; 0x37
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	69 f7       	brne	.-38     	; 0x2ff8 <LCD_sendCommand+0x3c0>
    301e:	2d c0       	rjmp	.+90     	; 0x307a <LCD_sendCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3020:	68 ad       	ldd	r22, Y+56	; 0x38
    3022:	79 ad       	ldd	r23, Y+57	; 0x39
    3024:	8a ad       	ldd	r24, Y+58	; 0x3a
    3026:	9b ad       	ldd	r25, Y+59	; 0x3b
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9f ab       	std	Y+55, r25	; 0x37
    3032:	8e ab       	std	Y+54, r24	; 0x36
    3034:	8e a9       	ldd	r24, Y+54	; 0x36
    3036:	9f a9       	ldd	r25, Y+55	; 0x37
    3038:	9b ab       	std	Y+51, r25	; 0x33
    303a:	8a ab       	std	Y+50, r24	; 0x32
    303c:	8a a9       	ldd	r24, Y+50	; 0x32
    303e:	9b a9       	ldd	r25, Y+51	; 0x33
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	f1 f7       	brne	.-4      	; 0x3040 <LCD_sendCommand+0x408>
    3044:	9b ab       	std	Y+51, r25	; 0x33
    3046:	8a ab       	std	Y+50, r24	; 0x32
    3048:	18 c0       	rjmp	.+48     	; 0x307a <LCD_sendCommand+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    304a:	fe 01       	movw	r30, r28
    304c:	ef 5b       	subi	r30, 0xBF	; 191
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	fe 01       	movw	r30, r28
    3062:	e0 5c       	subi	r30, 0xC0	; 192
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 83       	st	Z, r24
    3068:	fe 01       	movw	r30, r28
    306a:	e0 5c       	subi	r30, 0xC0	; 192
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	80 81       	ld	r24, Z
    3070:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3072:	89 a9       	ldd	r24, Y+49	; 0x31
    3074:	8a 95       	dec	r24
    3076:	f1 f7       	brne	.-4      	; 0x3074 <LCD_sendCommand+0x43c>
    3078:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    307a:	fe 01       	movw	r30, r28
    307c:	ef 59       	subi	r30, 0x9F	; 159
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	60 81       	ld	r22, Z
    3084:	0e 94 8e 13 	call	0x271c	; 0x271c <GPIO_writePort>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 e8       	ldi	r26, 0x80	; 128
    308e:	bf e3       	ldi	r27, 0x3F	; 63
    3090:	8d a7       	std	Y+45, r24	; 0x2d
    3092:	9e a7       	std	Y+46, r25	; 0x2e
    3094:	af a7       	std	Y+47, r26	; 0x2f
    3096:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3098:	6d a5       	ldd	r22, Y+45	; 0x2d
    309a:	7e a5       	ldd	r23, Y+46	; 0x2e
    309c:	8f a5       	ldd	r24, Y+47	; 0x2f
    309e:	98 a9       	ldd	r25, Y+48	; 0x30
    30a0:	2b ea       	ldi	r18, 0xAB	; 171
    30a2:	3a ea       	ldi	r19, 0xAA	; 170
    30a4:	4a e2       	ldi	r20, 0x2A	; 42
    30a6:	50 e4       	ldi	r21, 0x40	; 64
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	89 a7       	std	Y+41, r24	; 0x29
    30b2:	9a a7       	std	Y+42, r25	; 0x2a
    30b4:	ab a7       	std	Y+43, r26	; 0x2b
    30b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30b8:	69 a5       	ldd	r22, Y+41	; 0x29
    30ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    30bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    30be:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	1c f4       	brge	.+6      	; 0x30d6 <LCD_sendCommand+0x49e>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	88 a7       	std	Y+40, r24	; 0x28
    30d4:	91 c0       	rjmp	.+290    	; 0x31f8 <LCD_sendCommand+0x5c0>
	else if (__tmp > 255)
    30d6:	69 a5       	ldd	r22, Y+41	; 0x29
    30d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    30da:	8b a5       	ldd	r24, Y+43	; 0x2b
    30dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	53 e4       	ldi	r21, 0x43	; 67
    30e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <LCD_sendCommand+0x4b8>
    30ee:	7b c0       	rjmp	.+246    	; 0x31e6 <LCD_sendCommand+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    30f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    30f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    30f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f6:	98 a9       	ldd	r25, Y+48	; 0x30
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4a e7       	ldi	r20, 0x7A	; 122
    30fe:	54 e4       	ldi	r21, 0x44	; 68
    3100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	8c a3       	std	Y+36, r24	; 0x24
    310a:	9d a3       	std	Y+37, r25	; 0x25
    310c:	ae a3       	std	Y+38, r26	; 0x26
    310e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3110:	6c a1       	ldd	r22, Y+36	; 0x24
    3112:	7d a1       	ldd	r23, Y+37	; 0x25
    3114:	8e a1       	ldd	r24, Y+38	; 0x26
    3116:	9f a1       	ldd	r25, Y+39	; 0x27
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	4a ef       	ldi	r20, 0xFA	; 250
    311e:	54 e4       	ldi	r21, 0x44	; 68
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	88 a3       	std	Y+32, r24	; 0x20
    312a:	99 a3       	std	Y+33, r25	; 0x21
    312c:	aa a3       	std	Y+34, r26	; 0x22
    312e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3130:	68 a1       	ldd	r22, Y+32	; 0x20
    3132:	79 a1       	ldd	r23, Y+33	; 0x21
    3134:	8a a1       	ldd	r24, Y+34	; 0x22
    3136:	9b a1       	ldd	r25, Y+35	; 0x23
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e8       	ldi	r20, 0x80	; 128
    313e:	5f e3       	ldi	r21, 0x3F	; 63
    3140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3144:	88 23       	and	r24, r24
    3146:	2c f4       	brge	.+10     	; 0x3152 <LCD_sendCommand+0x51a>
		__ticks = 1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	9f 8f       	std	Y+31, r25	; 0x1f
    314e:	8e 8f       	std	Y+30, r24	; 0x1e
    3150:	3f c0       	rjmp	.+126    	; 0x31d0 <LCD_sendCommand+0x598>
	else if (__tmp > 65535)
    3152:	68 a1       	ldd	r22, Y+32	; 0x20
    3154:	79 a1       	ldd	r23, Y+33	; 0x21
    3156:	8a a1       	ldd	r24, Y+34	; 0x22
    3158:	9b a1       	ldd	r25, Y+35	; 0x23
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	3f ef       	ldi	r19, 0xFF	; 255
    315e:	4f e7       	ldi	r20, 0x7F	; 127
    3160:	57 e4       	ldi	r21, 0x47	; 71
    3162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3166:	18 16       	cp	r1, r24
    3168:	4c f5       	brge	.+82     	; 0x31bc <LCD_sendCommand+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316a:	6c a1       	ldd	r22, Y+36	; 0x24
    316c:	7d a1       	ldd	r23, Y+37	; 0x25
    316e:	8e a1       	ldd	r24, Y+38	; 0x26
    3170:	9f a1       	ldd	r25, Y+39	; 0x27
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e2       	ldi	r20, 0x20	; 32
    3178:	51 e4       	ldi	r21, 0x41	; 65
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9f 8f       	std	Y+31, r25	; 0x1f
    3190:	8e 8f       	std	Y+30, r24	; 0x1e
    3192:	0f c0       	rjmp	.+30     	; 0x31b2 <LCD_sendCommand+0x57a>
    3194:	88 ec       	ldi	r24, 0xC8	; 200
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9d 8f       	std	Y+29, r25	; 0x1d
    319a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    319c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    319e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <LCD_sendCommand+0x568>
    31a4:	9d 8f       	std	Y+29, r25	; 0x1d
    31a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	9f 8f       	std	Y+31, r25	; 0x1f
    31b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	69 f7       	brne	.-38     	; 0x3194 <LCD_sendCommand+0x55c>
    31ba:	24 c0       	rjmp	.+72     	; 0x3204 <LCD_sendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31bc:	68 a1       	ldd	r22, Y+32	; 0x20
    31be:	79 a1       	ldd	r23, Y+33	; 0x21
    31c0:	8a a1       	ldd	r24, Y+34	; 0x22
    31c2:	9b a1       	ldd	r25, Y+35	; 0x23
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9f 8f       	std	Y+31, r25	; 0x1f
    31ce:	8e 8f       	std	Y+30, r24	; 0x1e
    31d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31d4:	9b 8f       	std	Y+27, r25	; 0x1b
    31d6:	8a 8f       	std	Y+26, r24	; 0x1a
    31d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <LCD_sendCommand+0x5a4>
    31e0:	9b 8f       	std	Y+27, r25	; 0x1b
    31e2:	8a 8f       	std	Y+26, r24	; 0x1a
    31e4:	0f c0       	rjmp	.+30     	; 0x3204 <LCD_sendCommand+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31e6:	69 a5       	ldd	r22, Y+41	; 0x29
    31e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    31ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	88 a7       	std	Y+40, r24	; 0x28
    31f8:	88 a5       	ldd	r24, Y+40	; 0x28
    31fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fc:	89 8d       	ldd	r24, Y+25	; 0x19
    31fe:	8a 95       	dec	r24
    3200:	f1 f7       	brne	.-4      	; 0x31fe <LCD_sendCommand+0x5c6>
    3202:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	62 e0       	ldi	r22, 0x02	; 2
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	a0 e8       	ldi	r26, 0x80	; 128
    3214:	bf e3       	ldi	r27, 0x3F	; 63
    3216:	8d 8b       	std	Y+21, r24	; 0x15
    3218:	9e 8b       	std	Y+22, r25	; 0x16
    321a:	af 8b       	std	Y+23, r26	; 0x17
    321c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    321e:	6d 89       	ldd	r22, Y+21	; 0x15
    3220:	7e 89       	ldd	r23, Y+22	; 0x16
    3222:	8f 89       	ldd	r24, Y+23	; 0x17
    3224:	98 8d       	ldd	r25, Y+24	; 0x18
    3226:	2b ea       	ldi	r18, 0xAB	; 171
    3228:	3a ea       	ldi	r19, 0xAA	; 170
    322a:	4a e2       	ldi	r20, 0x2A	; 42
    322c:	50 e4       	ldi	r21, 0x40	; 64
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	89 8b       	std	Y+17, r24	; 0x11
    3238:	9a 8b       	std	Y+18, r25	; 0x12
    323a:	ab 8b       	std	Y+19, r26	; 0x13
    323c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    323e:	69 89       	ldd	r22, Y+17	; 0x11
    3240:	7a 89       	ldd	r23, Y+18	; 0x12
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	1c f4       	brge	.+6      	; 0x325c <LCD_sendCommand+0x624>
		__ticks = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	88 8b       	std	Y+16, r24	; 0x10
    325a:	91 c0       	rjmp	.+290    	; 0x337e <LCD_sendCommand+0x746>
	else if (__tmp > 255)
    325c:	69 89       	ldd	r22, Y+17	; 0x11
    325e:	7a 89       	ldd	r23, Y+18	; 0x12
    3260:	8b 89       	ldd	r24, Y+19	; 0x13
    3262:	9c 89       	ldd	r25, Y+20	; 0x14
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4f e7       	ldi	r20, 0x7F	; 127
    326a:	53 e4       	ldi	r21, 0x43	; 67
    326c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3270:	18 16       	cp	r1, r24
    3272:	0c f0       	brlt	.+2      	; 0x3276 <LCD_sendCommand+0x63e>
    3274:	7b c0       	rjmp	.+246    	; 0x336c <LCD_sendCommand+0x734>
	{
		_delay_ms(__us / 1000.0);
    3276:	6d 89       	ldd	r22, Y+21	; 0x15
    3278:	7e 89       	ldd	r23, Y+22	; 0x16
    327a:	8f 89       	ldd	r24, Y+23	; 0x17
    327c:	98 8d       	ldd	r25, Y+24	; 0x18
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a e7       	ldi	r20, 0x7A	; 122
    3284:	54 e4       	ldi	r21, 0x44	; 68
    3286:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8c 87       	std	Y+12, r24	; 0x0c
    3290:	9d 87       	std	Y+13, r25	; 0x0d
    3292:	ae 87       	std	Y+14, r26	; 0x0e
    3294:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3296:	6c 85       	ldd	r22, Y+12	; 0x0c
    3298:	7d 85       	ldd	r23, Y+13	; 0x0d
    329a:	8e 85       	ldd	r24, Y+14	; 0x0e
    329c:	9f 85       	ldd	r25, Y+15	; 0x0f
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	4a ef       	ldi	r20, 0xFA	; 250
    32a4:	54 e4       	ldi	r21, 0x44	; 68
    32a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	88 87       	std	Y+8, r24	; 0x08
    32b0:	99 87       	std	Y+9, r25	; 0x09
    32b2:	aa 87       	std	Y+10, r26	; 0x0a
    32b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32b6:	68 85       	ldd	r22, Y+8	; 0x08
    32b8:	79 85       	ldd	r23, Y+9	; 0x09
    32ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    32bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e8       	ldi	r20, 0x80	; 128
    32c4:	5f e3       	ldi	r21, 0x3F	; 63
    32c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ca:	88 23       	and	r24, r24
    32cc:	2c f4       	brge	.+10     	; 0x32d8 <LCD_sendCommand+0x6a0>
		__ticks = 1;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9f 83       	std	Y+7, r25	; 0x07
    32d4:	8e 83       	std	Y+6, r24	; 0x06
    32d6:	3f c0       	rjmp	.+126    	; 0x3356 <LCD_sendCommand+0x71e>
	else if (__tmp > 65535)
    32d8:	68 85       	ldd	r22, Y+8	; 0x08
    32da:	79 85       	ldd	r23, Y+9	; 0x09
    32dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    32de:	9b 85       	ldd	r25, Y+11	; 0x0b
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	3f ef       	ldi	r19, 0xFF	; 255
    32e4:	4f e7       	ldi	r20, 0x7F	; 127
    32e6:	57 e4       	ldi	r21, 0x47	; 71
    32e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ec:	18 16       	cp	r1, r24
    32ee:	4c f5       	brge	.+82     	; 0x3342 <LCD_sendCommand+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	9f 83       	std	Y+7, r25	; 0x07
    3316:	8e 83       	std	Y+6, r24	; 0x06
    3318:	0f c0       	rjmp	.+30     	; 0x3338 <LCD_sendCommand+0x700>
    331a:	88 ec       	ldi	r24, 0xC8	; 200
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9d 83       	std	Y+5, r25	; 0x05
    3320:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3322:	8c 81       	ldd	r24, Y+4	; 0x04
    3324:	9d 81       	ldd	r25, Y+5	; 0x05
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <LCD_sendCommand+0x6ee>
    332a:	9d 83       	std	Y+5, r25	; 0x05
    332c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332e:	8e 81       	ldd	r24, Y+6	; 0x06
    3330:	9f 81       	ldd	r25, Y+7	; 0x07
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	9f 83       	std	Y+7, r25	; 0x07
    3336:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3338:	8e 81       	ldd	r24, Y+6	; 0x06
    333a:	9f 81       	ldd	r25, Y+7	; 0x07
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	69 f7       	brne	.-38     	; 0x331a <LCD_sendCommand+0x6e2>
    3340:	24 c0       	rjmp	.+72     	; 0x338a <LCD_sendCommand+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3342:	68 85       	ldd	r22, Y+8	; 0x08
    3344:	79 85       	ldd	r23, Y+9	; 0x09
    3346:	8a 85       	ldd	r24, Y+10	; 0x0a
    3348:	9b 85       	ldd	r25, Y+11	; 0x0b
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	9f 83       	std	Y+7, r25	; 0x07
    3354:	8e 83       	std	Y+6, r24	; 0x06
    3356:	8e 81       	ldd	r24, Y+6	; 0x06
    3358:	9f 81       	ldd	r25, Y+7	; 0x07
    335a:	9b 83       	std	Y+3, r25	; 0x03
    335c:	8a 83       	std	Y+2, r24	; 0x02
    335e:	8a 81       	ldd	r24, Y+2	; 0x02
    3360:	9b 81       	ldd	r25, Y+3	; 0x03
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	f1 f7       	brne	.-4      	; 0x3362 <LCD_sendCommand+0x72a>
    3366:	9b 83       	std	Y+3, r25	; 0x03
    3368:	8a 83       	std	Y+2, r24	; 0x02
    336a:	0f c0       	rjmp	.+30     	; 0x338a <LCD_sendCommand+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    336c:	69 89       	ldd	r22, Y+17	; 0x11
    336e:	7a 89       	ldd	r23, Y+18	; 0x12
    3370:	8b 89       	ldd	r24, Y+19	; 0x13
    3372:	9c 89       	ldd	r25, Y+20	; 0x14
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	88 8b       	std	Y+16, r24	; 0x10
    337e:	88 89       	ldd	r24, Y+16	; 0x10
    3380:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	8a 95       	dec	r24
    3386:	f1 f7       	brne	.-4      	; 0x3384 <LCD_sendCommand+0x74c>
    3388:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    338a:	cf 59       	subi	r28, 0x9F	; 159
    338c:	df 4f       	sbci	r29, 0xFF	; 255
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	08 95       	ret

000033a2 <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	cd 54       	subi	r28, 0x4D	; 77
    33b0:	d0 40       	sbci	r29, 0x00	; 0
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	fe 01       	movw	r30, r28
    33be:	e3 5b       	subi	r30, 0xB3	; 179
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	61 e0       	ldi	r22, 0x01	; 1
    33c8:	41 e0       	ldi	r20, 0x01	; 1
    33ca:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
    33ce:	fe 01       	movw	r30, r28
    33d0:	e7 5b       	subi	r30, 0xB7	; 183
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	a0 e8       	ldi	r26, 0x80	; 128
    33da:	bf e3       	ldi	r27, 0x3F	; 63
    33dc:	80 83       	st	Z, r24
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	a2 83       	std	Z+2, r26	; 0x02
    33e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e4:	8e 01       	movw	r16, r28
    33e6:	0b 5b       	subi	r16, 0xBB	; 187
    33e8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ea:	fe 01       	movw	r30, r28
    33ec:	e7 5b       	subi	r30, 0xB7	; 183
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	60 81       	ld	r22, Z
    33f2:	71 81       	ldd	r23, Z+1	; 0x01
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	93 81       	ldd	r25, Z+3	; 0x03
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4a ef       	ldi	r20, 0xFA	; 250
    33fe:	54 e4       	ldi	r21, 0x44	; 68
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	f8 01       	movw	r30, r16
    340a:	80 83       	st	Z, r24
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	a2 83       	std	Z+2, r26	; 0x02
    3410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3412:	fe 01       	movw	r30, r28
    3414:	eb 5b       	subi	r30, 0xBB	; 187
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e8       	ldi	r20, 0x80	; 128
    3426:	5f e3       	ldi	r21, 0x3F	; 63
    3428:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342c:	88 23       	and	r24, r24
    342e:	44 f4       	brge	.+16     	; 0x3440 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3430:	fe 01       	movw	r30, r28
    3432:	ed 5b       	subi	r30, 0xBD	; 189
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
    343e:	64 c0       	rjmp	.+200    	; 0x3508 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3440:	fe 01       	movw	r30, r28
    3442:	eb 5b       	subi	r30, 0xBB	; 187
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	82 81       	ldd	r24, Z+2	; 0x02
    344c:	93 81       	ldd	r25, Z+3	; 0x03
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	3f ef       	ldi	r19, 0xFF	; 255
    3452:	4f e7       	ldi	r20, 0x7F	; 127
    3454:	57 e4       	ldi	r21, 0x47	; 71
    3456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    345a:	18 16       	cp	r1, r24
    345c:	0c f0       	brlt	.+2      	; 0x3460 <LCD_displayCharacter+0xbe>
    345e:	43 c0       	rjmp	.+134    	; 0x34e6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	fe 01       	movw	r30, r28
    3462:	e7 5b       	subi	r30, 0xB7	; 183
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	60 81       	ld	r22, Z
    3468:	71 81       	ldd	r23, Z+1	; 0x01
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	93 81       	ldd	r25, Z+3	; 0x03
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e2       	ldi	r20, 0x20	; 32
    3474:	51 e4       	ldi	r21, 0x41	; 65
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	8e 01       	movw	r16, r28
    3480:	0d 5b       	subi	r16, 0xBD	; 189
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	bc 01       	movw	r22, r24
    3486:	cd 01       	movw	r24, r26
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	f8 01       	movw	r30, r16
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	80 83       	st	Z, r24
    3496:	1f c0       	rjmp	.+62     	; 0x34d6 <LCD_displayCharacter+0x134>
    3498:	fe 01       	movw	r30, r28
    349a:	ef 5b       	subi	r30, 0xBF	; 191
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	88 ec       	ldi	r24, 0xC8	; 200
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	91 83       	std	Z+1, r25	; 0x01
    34a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a6:	fe 01       	movw	r30, r28
    34a8:	ef 5b       	subi	r30, 0xBF	; 191
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_displayCharacter+0x10e>
    34b4:	fe 01       	movw	r30, r28
    34b6:	ef 5b       	subi	r30, 0xBF	; 191
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	91 83       	std	Z+1, r25	; 0x01
    34bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34be:	de 01       	movw	r26, r28
    34c0:	ad 5b       	subi	r26, 0xBD	; 189
    34c2:	bf 4f       	sbci	r27, 0xFF	; 255
    34c4:	fe 01       	movw	r30, r28
    34c6:	ed 5b       	subi	r30, 0xBD	; 189
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 81       	ld	r24, Z
    34cc:	91 81       	ldd	r25, Z+1	; 0x01
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	11 96       	adiw	r26, 0x01	; 1
    34d2:	9c 93       	st	X, r25
    34d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d6:	fe 01       	movw	r30, r28
    34d8:	ed 5b       	subi	r30, 0xBD	; 189
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	d1 f6       	brne	.-76     	; 0x3498 <LCD_displayCharacter+0xf6>
    34e4:	24 c0       	rjmp	.+72     	; 0x352e <LCD_displayCharacter+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e6:	8e 01       	movw	r16, r28
    34e8:	0d 5b       	subi	r16, 0xBD	; 189
    34ea:	1f 4f       	sbci	r17, 0xFF	; 255
    34ec:	fe 01       	movw	r30, r28
    34ee:	eb 5b       	subi	r30, 0xBB	; 187
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	60 81       	ld	r22, Z
    34f4:	71 81       	ldd	r23, Z+1	; 0x01
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	f8 01       	movw	r30, r16
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	80 83       	st	Z, r24
    3508:	fe 01       	movw	r30, r28
    350a:	ed 5b       	subi	r30, 0xBD	; 189
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	fe 01       	movw	r30, r28
    3514:	ff 96       	adiw	r30, 0x3f	; 63
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
    351a:	fe 01       	movw	r30, r28
    351c:	ff 96       	adiw	r30, 0x3f	; 63
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <LCD_displayCharacter+0x180>
    3526:	fe 01       	movw	r30, r28
    3528:	ff 96       	adiw	r30, 0x3f	; 63
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	62 e0       	ldi	r22, 0x02	; 2
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a0 e8       	ldi	r26, 0x80	; 128
    353e:	bf e3       	ldi	r27, 0x3F	; 63
    3540:	8b af       	std	Y+59, r24	; 0x3b
    3542:	9c af       	std	Y+60, r25	; 0x3c
    3544:	ad af       	std	Y+61, r26	; 0x3d
    3546:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3548:	6b ad       	ldd	r22, Y+59	; 0x3b
    354a:	7c ad       	ldd	r23, Y+60	; 0x3c
    354c:	8d ad       	ldd	r24, Y+61	; 0x3d
    354e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	4a ef       	ldi	r20, 0xFA	; 250
    3556:	54 e4       	ldi	r21, 0x44	; 68
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	8f ab       	std	Y+55, r24	; 0x37
    3562:	98 af       	std	Y+56, r25	; 0x38
    3564:	a9 af       	std	Y+57, r26	; 0x39
    3566:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3568:	6f a9       	ldd	r22, Y+55	; 0x37
    356a:	78 ad       	ldd	r23, Y+56	; 0x38
    356c:	89 ad       	ldd	r24, Y+57	; 0x39
    356e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e8       	ldi	r20, 0x80	; 128
    3576:	5f e3       	ldi	r21, 0x3F	; 63
    3578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    357c:	88 23       	and	r24, r24
    357e:	2c f4       	brge	.+10     	; 0x358a <LCD_displayCharacter+0x1e8>
		__ticks = 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9e ab       	std	Y+54, r25	; 0x36
    3586:	8d ab       	std	Y+53, r24	; 0x35
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <LCD_displayCharacter+0x266>
	else if (__tmp > 65535)
    358a:	6f a9       	ldd	r22, Y+55	; 0x37
    358c:	78 ad       	ldd	r23, Y+56	; 0x38
    358e:	89 ad       	ldd	r24, Y+57	; 0x39
    3590:	9a ad       	ldd	r25, Y+58	; 0x3a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	3f ef       	ldi	r19, 0xFF	; 255
    3596:	4f e7       	ldi	r20, 0x7F	; 127
    3598:	57 e4       	ldi	r21, 0x47	; 71
    359a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359e:	18 16       	cp	r1, r24
    35a0:	4c f5       	brge	.+82     	; 0x35f4 <LCD_displayCharacter+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	6b ad       	ldd	r22, Y+59	; 0x3b
    35a4:	7c ad       	ldd	r23, Y+60	; 0x3c
    35a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e2       	ldi	r20, 0x20	; 32
    35b0:	51 e4       	ldi	r21, 0x41	; 65
    35b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9e ab       	std	Y+54, r25	; 0x36
    35c8:	8d ab       	std	Y+53, r24	; 0x35
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <LCD_displayCharacter+0x248>
    35cc:	88 ec       	ldi	r24, 0xC8	; 200
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9c ab       	std	Y+52, r25	; 0x34
    35d2:	8b ab       	std	Y+51, r24	; 0x33
    35d4:	8b a9       	ldd	r24, Y+51	; 0x33
    35d6:	9c a9       	ldd	r25, Y+52	; 0x34
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <LCD_displayCharacter+0x236>
    35dc:	9c ab       	std	Y+52, r25	; 0x34
    35de:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e0:	8d a9       	ldd	r24, Y+53	; 0x35
    35e2:	9e a9       	ldd	r25, Y+54	; 0x36
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	9e ab       	std	Y+54, r25	; 0x36
    35e8:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	8d a9       	ldd	r24, Y+53	; 0x35
    35ec:	9e a9       	ldd	r25, Y+54	; 0x36
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	69 f7       	brne	.-38     	; 0x35cc <LCD_displayCharacter+0x22a>
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <LCD_displayCharacter+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	6f a9       	ldd	r22, Y+55	; 0x37
    35f6:	78 ad       	ldd	r23, Y+56	; 0x38
    35f8:	89 ad       	ldd	r24, Y+57	; 0x39
    35fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    35fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9e ab       	std	Y+54, r25	; 0x36
    3606:	8d ab       	std	Y+53, r24	; 0x35
    3608:	8d a9       	ldd	r24, Y+53	; 0x35
    360a:	9e a9       	ldd	r25, Y+54	; 0x36
    360c:	9a ab       	std	Y+50, r25	; 0x32
    360e:	89 ab       	std	Y+49, r24	; 0x31
    3610:	89 a9       	ldd	r24, Y+49	; 0x31
    3612:	9a a9       	ldd	r25, Y+50	; 0x32
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <LCD_displayCharacter+0x272>
    3618:	9a ab       	std	Y+50, r25	; 0x32
    361a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);

#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    361c:	fe 01       	movw	r30, r28
    361e:	e3 5b       	subi	r30, 0xB3	; 179
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	82 e0       	ldi	r24, 0x02	; 2
    3624:	60 81       	ld	r22, Z
    3626:	0e 94 8e 13 	call	0x271c	; 0x271c <GPIO_writePort>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a0 e8       	ldi	r26, 0x80	; 128
    3630:	bf e3       	ldi	r27, 0x3F	; 63
    3632:	8d a7       	std	Y+45, r24	; 0x2d
    3634:	9e a7       	std	Y+46, r25	; 0x2e
    3636:	af a7       	std	Y+47, r26	; 0x2f
    3638:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    363a:	6d a5       	ldd	r22, Y+45	; 0x2d
    363c:	7e a5       	ldd	r23, Y+46	; 0x2e
    363e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3640:	98 a9       	ldd	r25, Y+48	; 0x30
    3642:	2b ea       	ldi	r18, 0xAB	; 171
    3644:	3a ea       	ldi	r19, 0xAA	; 170
    3646:	4a e2       	ldi	r20, 0x2A	; 42
    3648:	50 e4       	ldi	r21, 0x40	; 64
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	89 a7       	std	Y+41, r24	; 0x29
    3654:	9a a7       	std	Y+42, r25	; 0x2a
    3656:	ab a7       	std	Y+43, r26	; 0x2b
    3658:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    365a:	69 a5       	ldd	r22, Y+41	; 0x29
    365c:	7a a5       	ldd	r23, Y+42	; 0x2a
    365e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3660:	9c a5       	ldd	r25, Y+44	; 0x2c
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e8       	ldi	r20, 0x80	; 128
    3668:	5f e3       	ldi	r21, 0x3F	; 63
    366a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    366e:	88 23       	and	r24, r24
    3670:	1c f4       	brge	.+6      	; 0x3678 <LCD_displayCharacter+0x2d6>
		__ticks = 1;
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	88 a7       	std	Y+40, r24	; 0x28
    3676:	91 c0       	rjmp	.+290    	; 0x379a <LCD_displayCharacter+0x3f8>
	else if (__tmp > 255)
    3678:	69 a5       	ldd	r22, Y+41	; 0x29
    367a:	7a a5       	ldd	r23, Y+42	; 0x2a
    367c:	8b a5       	ldd	r24, Y+43	; 0x2b
    367e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	4f e7       	ldi	r20, 0x7F	; 127
    3686:	53 e4       	ldi	r21, 0x43	; 67
    3688:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    368c:	18 16       	cp	r1, r24
    368e:	0c f0       	brlt	.+2      	; 0x3692 <LCD_displayCharacter+0x2f0>
    3690:	7b c0       	rjmp	.+246    	; 0x3788 <LCD_displayCharacter+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    3692:	6d a5       	ldd	r22, Y+45	; 0x2d
    3694:	7e a5       	ldd	r23, Y+46	; 0x2e
    3696:	8f a5       	ldd	r24, Y+47	; 0x2f
    3698:	98 a9       	ldd	r25, Y+48	; 0x30
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	4a e7       	ldi	r20, 0x7A	; 122
    36a0:	54 e4       	ldi	r21, 0x44	; 68
    36a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	8c a3       	std	Y+36, r24	; 0x24
    36ac:	9d a3       	std	Y+37, r25	; 0x25
    36ae:	ae a3       	std	Y+38, r26	; 0x26
    36b0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b2:	6c a1       	ldd	r22, Y+36	; 0x24
    36b4:	7d a1       	ldd	r23, Y+37	; 0x25
    36b6:	8e a1       	ldd	r24, Y+38	; 0x26
    36b8:	9f a1       	ldd	r25, Y+39	; 0x27
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	4a ef       	ldi	r20, 0xFA	; 250
    36c0:	54 e4       	ldi	r21, 0x44	; 68
    36c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	88 a3       	std	Y+32, r24	; 0x20
    36cc:	99 a3       	std	Y+33, r25	; 0x21
    36ce:	aa a3       	std	Y+34, r26	; 0x22
    36d0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    36d2:	68 a1       	ldd	r22, Y+32	; 0x20
    36d4:	79 a1       	ldd	r23, Y+33	; 0x21
    36d6:	8a a1       	ldd	r24, Y+34	; 0x22
    36d8:	9b a1       	ldd	r25, Y+35	; 0x23
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e8       	ldi	r20, 0x80	; 128
    36e0:	5f e3       	ldi	r21, 0x3F	; 63
    36e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36e6:	88 23       	and	r24, r24
    36e8:	2c f4       	brge	.+10     	; 0x36f4 <LCD_displayCharacter+0x352>
		__ticks = 1;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	9f 8f       	std	Y+31, r25	; 0x1f
    36f0:	8e 8f       	std	Y+30, r24	; 0x1e
    36f2:	3f c0       	rjmp	.+126    	; 0x3772 <LCD_displayCharacter+0x3d0>
	else if (__tmp > 65535)
    36f4:	68 a1       	ldd	r22, Y+32	; 0x20
    36f6:	79 a1       	ldd	r23, Y+33	; 0x21
    36f8:	8a a1       	ldd	r24, Y+34	; 0x22
    36fa:	9b a1       	ldd	r25, Y+35	; 0x23
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	3f ef       	ldi	r19, 0xFF	; 255
    3700:	4f e7       	ldi	r20, 0x7F	; 127
    3702:	57 e4       	ldi	r21, 0x47	; 71
    3704:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3708:	18 16       	cp	r1, r24
    370a:	4c f5       	brge	.+82     	; 0x375e <LCD_displayCharacter+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370c:	6c a1       	ldd	r22, Y+36	; 0x24
    370e:	7d a1       	ldd	r23, Y+37	; 0x25
    3710:	8e a1       	ldd	r24, Y+38	; 0x26
    3712:	9f a1       	ldd	r25, Y+39	; 0x27
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e2       	ldi	r20, 0x20	; 32
    371a:	51 e4       	ldi	r21, 0x41	; 65
    371c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	bc 01       	movw	r22, r24
    3726:	cd 01       	movw	r24, r26
    3728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	9f 8f       	std	Y+31, r25	; 0x1f
    3732:	8e 8f       	std	Y+30, r24	; 0x1e
    3734:	0f c0       	rjmp	.+30     	; 0x3754 <LCD_displayCharacter+0x3b2>
    3736:	88 ec       	ldi	r24, 0xC8	; 200
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	9d 8f       	std	Y+29, r25	; 0x1d
    373c:	8c 8f       	std	Y+28, r24	; 0x1c
    373e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3740:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <LCD_displayCharacter+0x3a0>
    3746:	9d 8f       	std	Y+29, r25	; 0x1d
    3748:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    374c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	9f 8f       	std	Y+31, r25	; 0x1f
    3752:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3754:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3756:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	69 f7       	brne	.-38     	; 0x3736 <LCD_displayCharacter+0x394>
    375c:	24 c0       	rjmp	.+72     	; 0x37a6 <LCD_displayCharacter+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375e:	68 a1       	ldd	r22, Y+32	; 0x20
    3760:	79 a1       	ldd	r23, Y+33	; 0x21
    3762:	8a a1       	ldd	r24, Y+34	; 0x22
    3764:	9b a1       	ldd	r25, Y+35	; 0x23
    3766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9f 8f       	std	Y+31, r25	; 0x1f
    3770:	8e 8f       	std	Y+30, r24	; 0x1e
    3772:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3774:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3776:	9b 8f       	std	Y+27, r25	; 0x1b
    3778:	8a 8f       	std	Y+26, r24	; 0x1a
    377a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    377c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <LCD_displayCharacter+0x3dc>
    3782:	9b 8f       	std	Y+27, r25	; 0x1b
    3784:	8a 8f       	std	Y+26, r24	; 0x1a
    3786:	0f c0       	rjmp	.+30     	; 0x37a6 <LCD_displayCharacter+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3788:	69 a5       	ldd	r22, Y+41	; 0x29
    378a:	7a a5       	ldd	r23, Y+42	; 0x2a
    378c:	8b a5       	ldd	r24, Y+43	; 0x2b
    378e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	88 a7       	std	Y+40, r24	; 0x28
    379a:	88 a5       	ldd	r24, Y+40	; 0x28
    379c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    379e:	89 8d       	ldd	r24, Y+25	; 0x19
    37a0:	8a 95       	dec	r24
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <LCD_displayCharacter+0x3fe>
    37a4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	62 e0       	ldi	r22, 0x02	; 2
    37aa:	40 e0       	ldi	r20, 0x00	; 0
    37ac:	0e 94 9b 12 	call	0x2536	; 0x2536 <GPIO_writePin>
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a0 e8       	ldi	r26, 0x80	; 128
    37b6:	bf e3       	ldi	r27, 0x3F	; 63
    37b8:	8d 8b       	std	Y+21, r24	; 0x15
    37ba:	9e 8b       	std	Y+22, r25	; 0x16
    37bc:	af 8b       	std	Y+23, r26	; 0x17
    37be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37c0:	6d 89       	ldd	r22, Y+21	; 0x15
    37c2:	7e 89       	ldd	r23, Y+22	; 0x16
    37c4:	8f 89       	ldd	r24, Y+23	; 0x17
    37c6:	98 8d       	ldd	r25, Y+24	; 0x18
    37c8:	2b ea       	ldi	r18, 0xAB	; 171
    37ca:	3a ea       	ldi	r19, 0xAA	; 170
    37cc:	4a e2       	ldi	r20, 0x2A	; 42
    37ce:	50 e4       	ldi	r21, 0x40	; 64
    37d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	89 8b       	std	Y+17, r24	; 0x11
    37da:	9a 8b       	std	Y+18, r25	; 0x12
    37dc:	ab 8b       	std	Y+19, r26	; 0x13
    37de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    37e0:	69 89       	ldd	r22, Y+17	; 0x11
    37e2:	7a 89       	ldd	r23, Y+18	; 0x12
    37e4:	8b 89       	ldd	r24, Y+19	; 0x13
    37e6:	9c 89       	ldd	r25, Y+20	; 0x14
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f e3       	ldi	r21, 0x3F	; 63
    37f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f4:	88 23       	and	r24, r24
    37f6:	1c f4       	brge	.+6      	; 0x37fe <LCD_displayCharacter+0x45c>
		__ticks = 1;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	88 8b       	std	Y+16, r24	; 0x10
    37fc:	91 c0       	rjmp	.+290    	; 0x3920 <LCD_displayCharacter+0x57e>
	else if (__tmp > 255)
    37fe:	69 89       	ldd	r22, Y+17	; 0x11
    3800:	7a 89       	ldd	r23, Y+18	; 0x12
    3802:	8b 89       	ldd	r24, Y+19	; 0x13
    3804:	9c 89       	ldd	r25, Y+20	; 0x14
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	4f e7       	ldi	r20, 0x7F	; 127
    380c:	53 e4       	ldi	r21, 0x43	; 67
    380e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3812:	18 16       	cp	r1, r24
    3814:	0c f0       	brlt	.+2      	; 0x3818 <LCD_displayCharacter+0x476>
    3816:	7b c0       	rjmp	.+246    	; 0x390e <LCD_displayCharacter+0x56c>
	{
		_delay_ms(__us / 1000.0);
    3818:	6d 89       	ldd	r22, Y+21	; 0x15
    381a:	7e 89       	ldd	r23, Y+22	; 0x16
    381c:	8f 89       	ldd	r24, Y+23	; 0x17
    381e:	98 8d       	ldd	r25, Y+24	; 0x18
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	4a e7       	ldi	r20, 0x7A	; 122
    3826:	54 e4       	ldi	r21, 0x44	; 68
    3828:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	8c 87       	std	Y+12, r24	; 0x0c
    3832:	9d 87       	std	Y+13, r25	; 0x0d
    3834:	ae 87       	std	Y+14, r26	; 0x0e
    3836:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3838:	6c 85       	ldd	r22, Y+12	; 0x0c
    383a:	7d 85       	ldd	r23, Y+13	; 0x0d
    383c:	8e 85       	ldd	r24, Y+14	; 0x0e
    383e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	4a ef       	ldi	r20, 0xFA	; 250
    3846:	54 e4       	ldi	r21, 0x44	; 68
    3848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	88 87       	std	Y+8, r24	; 0x08
    3852:	99 87       	std	Y+9, r25	; 0x09
    3854:	aa 87       	std	Y+10, r26	; 0x0a
    3856:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3858:	68 85       	ldd	r22, Y+8	; 0x08
    385a:	79 85       	ldd	r23, Y+9	; 0x09
    385c:	8a 85       	ldd	r24, Y+10	; 0x0a
    385e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e8       	ldi	r20, 0x80	; 128
    3866:	5f e3       	ldi	r21, 0x3F	; 63
    3868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    386c:	88 23       	and	r24, r24
    386e:	2c f4       	brge	.+10     	; 0x387a <LCD_displayCharacter+0x4d8>
		__ticks = 1;
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9f 83       	std	Y+7, r25	; 0x07
    3876:	8e 83       	std	Y+6, r24	; 0x06
    3878:	3f c0       	rjmp	.+126    	; 0x38f8 <LCD_displayCharacter+0x556>
	else if (__tmp > 65535)
    387a:	68 85       	ldd	r22, Y+8	; 0x08
    387c:	79 85       	ldd	r23, Y+9	; 0x09
    387e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3880:	9b 85       	ldd	r25, Y+11	; 0x0b
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	3f ef       	ldi	r19, 0xFF	; 255
    3886:	4f e7       	ldi	r20, 0x7F	; 127
    3888:	57 e4       	ldi	r21, 0x47	; 71
    388a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    388e:	18 16       	cp	r1, r24
    3890:	4c f5       	brge	.+82     	; 0x38e4 <LCD_displayCharacter+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3892:	6c 85       	ldd	r22, Y+12	; 0x0c
    3894:	7d 85       	ldd	r23, Y+13	; 0x0d
    3896:	8e 85       	ldd	r24, Y+14	; 0x0e
    3898:	9f 85       	ldd	r25, Y+15	; 0x0f
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	40 e2       	ldi	r20, 0x20	; 32
    38a0:	51 e4       	ldi	r21, 0x41	; 65
    38a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9f 83       	std	Y+7, r25	; 0x07
    38b8:	8e 83       	std	Y+6, r24	; 0x06
    38ba:	0f c0       	rjmp	.+30     	; 0x38da <LCD_displayCharacter+0x538>
    38bc:	88 ec       	ldi	r24, 0xC8	; 200
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	9d 83       	std	Y+5, r25	; 0x05
    38c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38c4:	8c 81       	ldd	r24, Y+4	; 0x04
    38c6:	9d 81       	ldd	r25, Y+5	; 0x05
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	f1 f7       	brne	.-4      	; 0x38c8 <LCD_displayCharacter+0x526>
    38cc:	9d 83       	std	Y+5, r25	; 0x05
    38ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d0:	8e 81       	ldd	r24, Y+6	; 0x06
    38d2:	9f 81       	ldd	r25, Y+7	; 0x07
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	9f 83       	std	Y+7, r25	; 0x07
    38d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38da:	8e 81       	ldd	r24, Y+6	; 0x06
    38dc:	9f 81       	ldd	r25, Y+7	; 0x07
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	69 f7       	brne	.-38     	; 0x38bc <LCD_displayCharacter+0x51a>
    38e2:	24 c0       	rjmp	.+72     	; 0x392c <LCD_displayCharacter+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e4:	68 85       	ldd	r22, Y+8	; 0x08
    38e6:	79 85       	ldd	r23, Y+9	; 0x09
    38e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9f 83       	std	Y+7, r25	; 0x07
    38f6:	8e 83       	std	Y+6, r24	; 0x06
    38f8:	8e 81       	ldd	r24, Y+6	; 0x06
    38fa:	9f 81       	ldd	r25, Y+7	; 0x07
    38fc:	9b 83       	std	Y+3, r25	; 0x03
    38fe:	8a 83       	std	Y+2, r24	; 0x02
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	9b 81       	ldd	r25, Y+3	; 0x03
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	f1 f7       	brne	.-4      	; 0x3904 <LCD_displayCharacter+0x562>
    3908:	9b 83       	std	Y+3, r25	; 0x03
    390a:	8a 83       	std	Y+2, r24	; 0x02
    390c:	0f c0       	rjmp	.+30     	; 0x392c <LCD_displayCharacter+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    390e:	69 89       	ldd	r22, Y+17	; 0x11
    3910:	7a 89       	ldd	r23, Y+18	; 0x12
    3912:	8b 89       	ldd	r24, Y+19	; 0x13
    3914:	9c 89       	ldd	r25, Y+20	; 0x14
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	88 8b       	std	Y+16, r24	; 0x10
    3920:	88 89       	ldd	r24, Y+16	; 0x10
    3922:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	8a 95       	dec	r24
    3928:	f1 f7       	brne	.-4      	; 0x3926 <LCD_displayCharacter+0x584>
    392a:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    392c:	c3 5b       	subi	r28, 0xB3	; 179
    392e:	df 4f       	sbci	r29, 0xFF	; 255
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	cf 91       	pop	r28
    393c:	df 91       	pop	r29
    393e:	1f 91       	pop	r17
    3940:	0f 91       	pop	r16
    3942:	08 95       	ret

00003944 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	00 d0       	rcall	.+0      	; 0x394a <LCD_displayString+0x6>
    394a:	0f 92       	push	r0
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	9b 83       	std	Y+3, r25	; 0x03
    3952:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3954:	19 82       	std	Y+1, r1	; 0x01
    3956:	0e c0       	rjmp	.+28     	; 0x3974 <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	28 2f       	mov	r18, r24
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	8a 81       	ldd	r24, Y+2	; 0x02
    3960:	9b 81       	ldd	r25, Y+3	; 0x03
    3962:	fc 01       	movw	r30, r24
    3964:	e2 0f       	add	r30, r18
    3966:	f3 1f       	adc	r31, r19
    3968:	80 81       	ld	r24, Z
    396a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	8f 5f       	subi	r24, 0xFF	; 255
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	28 2f       	mov	r18, r24
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	9b 81       	ldd	r25, Y+3	; 0x03
    397e:	fc 01       	movw	r30, r24
    3980:	e2 0f       	add	r30, r18
    3982:	f3 1f       	adc	r31, r19
    3984:	80 81       	ld	r24, Z
    3986:	88 23       	and	r24, r24
    3988:	39 f7       	brne	.-50     	; 0x3958 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	62 97       	sbiw	r28, 0x12	; 18
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	9a 8b       	std	Y+18, r25	; 0x12
    39ac:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    39ae:	89 89       	ldd	r24, Y+17	; 0x11
    39b0:	9a 89       	ldd	r25, Y+18	; 0x12
    39b2:	9e 01       	movw	r18, r28
    39b4:	2f 5f       	subi	r18, 0xFF	; 255
    39b6:	3f 4f       	sbci	r19, 0xFF	; 255
    39b8:	b9 01       	movw	r22, r18
    39ba:	4a e0       	ldi	r20, 0x0A	; 10
    39bc:	50 e0       	ldi	r21, 0x00	; 0
    39be:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <itoa>

   LCD_displayString(arr);
    39c2:	ce 01       	movw	r24, r28
    39c4:	01 96       	adiw	r24, 0x01	; 1
    39c6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
}
    39ca:	62 96       	adiw	r28, 0x12	; 18
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	00 d0       	rcall	.+0      	; 0x39e2 <LCD_moveCursor+0x6>
    39e2:	00 d0       	rcall	.+0      	; 0x39e4 <LCD_moveCursor+0x8>
    39e4:	0f 92       	push	r0
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	8a 83       	std	Y+2, r24	; 0x02
    39ec:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    39ee:	8a 81       	ldd	r24, Y+2	; 0x02
    39f0:	28 2f       	mov	r18, r24
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	3d 83       	std	Y+5, r19	; 0x05
    39f6:	2c 83       	std	Y+4, r18	; 0x04
    39f8:	8c 81       	ldd	r24, Y+4	; 0x04
    39fa:	9d 81       	ldd	r25, Y+5	; 0x05
    39fc:	81 30       	cpi	r24, 0x01	; 1
    39fe:	91 05       	cpc	r25, r1
    3a00:	c1 f0       	breq	.+48     	; 0x3a32 <LCD_moveCursor+0x56>
    3a02:	2c 81       	ldd	r18, Y+4	; 0x04
    3a04:	3d 81       	ldd	r19, Y+5	; 0x05
    3a06:	22 30       	cpi	r18, 0x02	; 2
    3a08:	31 05       	cpc	r19, r1
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <LCD_moveCursor+0x3a>
    3a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	61 f0       	breq	.+24     	; 0x3a2c <LCD_moveCursor+0x50>
    3a14:	19 c0       	rjmp	.+50     	; 0x3a48 <LCD_moveCursor+0x6c>
    3a16:	2c 81       	ldd	r18, Y+4	; 0x04
    3a18:	3d 81       	ldd	r19, Y+5	; 0x05
    3a1a:	22 30       	cpi	r18, 0x02	; 2
    3a1c:	31 05       	cpc	r19, r1
    3a1e:	69 f0       	breq	.+26     	; 0x3a3a <LCD_moveCursor+0x5e>
    3a20:	8c 81       	ldd	r24, Y+4	; 0x04
    3a22:	9d 81       	ldd	r25, Y+5	; 0x05
    3a24:	83 30       	cpi	r24, 0x03	; 3
    3a26:	91 05       	cpc	r25, r1
    3a28:	61 f0       	breq	.+24     	; 0x3a42 <LCD_moveCursor+0x66>
    3a2a:	0e c0       	rjmp	.+28     	; 0x3a48 <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	89 83       	std	Y+1, r24	; 0x01
    3a30:	0b c0       	rjmp	.+22     	; 0x3a48 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	80 5c       	subi	r24, 0xC0	; 192
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	07 c0       	rjmp	.+14     	; 0x3a48 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	80 5f       	subi	r24, 0xF0	; 240
    3a3e:	89 83       	std	Y+1, r24	; 0x01
    3a40:	03 c0       	rjmp	.+6      	; 0x3a48 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    3a42:	8b 81       	ldd	r24, Y+3	; 0x03
    3a44:	80 5c       	subi	r24, 0xC0	; 192
    3a46:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	80 68       	ori	r24, 0x80	; 128
    3a4c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_sendCommand>
}
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <LCD_displayStringRowColumn+0x6>
    3a66:	00 d0       	rcall	.+0      	; 0x3a68 <LCD_displayStringRowColumn+0x8>
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	6a 83       	std	Y+2, r22	; 0x02
    3a70:	5c 83       	std	Y+4, r21	; 0x04
    3a72:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	6a 81       	ldd	r22, Y+2	; 0x02
    3a78:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    3a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a80:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_displayString>
}
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <LCD_sendCommand>
}
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <main>:
#include"app.h"
#include<util/delay.h>

#define F_CPU 8000000UL
int main(){
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	6c 97       	sbiw	r28, 0x1c	; 28
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61

	APP_Init();
    3aba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <APP_Init>
	APP_WelcomeScreen();
    3abe:	0e 94 58 06 	call	0xcb0	; 0xcb0 <APP_WelcomeScreen>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	a8 e4       	ldi	r26, 0x48	; 72
    3ac8:	b3 e4       	ldi	r27, 0x43	; 67
    3aca:	89 8f       	std	Y+25, r24	; 0x19
    3acc:	9a 8f       	std	Y+26, r25	; 0x1a
    3ace:	ab 8f       	std	Y+27, r26	; 0x1b
    3ad0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a ef       	ldi	r20, 0xFA	; 250
    3ae0:	54 e4       	ldi	r21, 0x44	; 68
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8d 8b       	std	Y+21, r24	; 0x15
    3aec:	9e 8b       	std	Y+22, r25	; 0x16
    3aee:	af 8b       	std	Y+23, r26	; 0x17
    3af0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3af2:	6d 89       	ldd	r22, Y+21	; 0x15
    3af4:	7e 89       	ldd	r23, Y+22	; 0x16
    3af6:	8f 89       	ldd	r24, Y+23	; 0x17
    3af8:	98 8d       	ldd	r25, Y+24	; 0x18
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	2c f4       	brge	.+10     	; 0x3b14 <main+0x6e>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9c 8b       	std	Y+20, r25	; 0x14
    3b10:	8b 8b       	std	Y+19, r24	; 0x13
    3b12:	3f c0       	rjmp	.+126    	; 0x3b92 <main+0xec>
	else if (__tmp > 65535)
    3b14:	6d 89       	ldd	r22, Y+21	; 0x15
    3b16:	7e 89       	ldd	r23, Y+22	; 0x16
    3b18:	8f 89       	ldd	r24, Y+23	; 0x17
    3b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	4c f5       	brge	.+82     	; 0x3b7e <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9c 8b       	std	Y+20, r25	; 0x14
    3b52:	8b 8b       	std	Y+19, r24	; 0x13
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <main+0xce>
    3b56:	88 ec       	ldi	r24, 0xC8	; 200
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	9a 8b       	std	Y+18, r25	; 0x12
    3b5c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b5e:	89 89       	ldd	r24, Y+17	; 0x11
    3b60:	9a 89       	ldd	r25, Y+18	; 0x12
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <main+0xbc>
    3b66:	9a 8b       	std	Y+18, r25	; 0x12
    3b68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	9c 8b       	std	Y+20, r25	; 0x14
    3b72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	8b 89       	ldd	r24, Y+19	; 0x13
    3b76:	9c 89       	ldd	r25, Y+20	; 0x14
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <main+0xb0>
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b80:	7e 89       	ldd	r23, Y+22	; 0x16
    3b82:	8f 89       	ldd	r24, Y+23	; 0x17
    3b84:	98 8d       	ldd	r25, Y+24	; 0x18
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	9c 8b       	std	Y+20, r25	; 0x14
    3b90:	8b 8b       	std	Y+19, r24	; 0x13
    3b92:	8b 89       	ldd	r24, Y+19	; 0x13
    3b94:	9c 89       	ldd	r25, Y+20	; 0x14
    3b96:	98 8b       	std	Y+16, r25	; 0x10
    3b98:	8f 87       	std	Y+15, r24	; 0x0f
    3b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9c:	98 89       	ldd	r25, Y+16	; 0x10
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <main+0xf8>
    3ba2:	98 8b       	std	Y+16, r25	; 0x10
    3ba4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	while(1)
	{
		APP_SecondInput();
    3ba6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <APP_SecondInput>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a8 e4       	ldi	r26, 0x48	; 72
    3bb0:	b3 e4       	ldi	r27, 0x43	; 67
    3bb2:	8b 87       	std	Y+11, r24	; 0x0b
    3bb4:	9c 87       	std	Y+12, r25	; 0x0c
    3bb6:	ad 87       	std	Y+13, r26	; 0x0d
    3bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a ef       	ldi	r20, 0xFA	; 250
    3bc8:	54 e4       	ldi	r21, 0x44	; 68
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	8f 83       	std	Y+7, r24	; 0x07
    3bd4:	98 87       	std	Y+8, r25	; 0x08
    3bd6:	a9 87       	std	Y+9, r26	; 0x09
    3bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bda:	6f 81       	ldd	r22, Y+7	; 0x07
    3bdc:	78 85       	ldd	r23, Y+8	; 0x08
    3bde:	89 85       	ldd	r24, Y+9	; 0x09
    3be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	2c f4       	brge	.+10     	; 0x3bfc <main+0x156>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	9e 83       	std	Y+6, r25	; 0x06
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
    3bfa:	3f c0       	rjmp	.+126    	; 0x3c7a <main+0x1d4>
	else if (__tmp > 65535)
    3bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfe:	78 85       	ldd	r23, Y+8	; 0x08
    3c00:	89 85       	ldd	r24, Y+9	; 0x09
    3c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	57 e4       	ldi	r21, 0x47	; 71
    3c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	4c f5       	brge	.+82     	; 0x3c66 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e2       	ldi	r20, 0x20	; 32
    3c22:	51 e4       	ldi	r21, 0x41	; 65
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9e 83       	std	Y+6, r25	; 0x06
    3c3a:	8d 83       	std	Y+5, r24	; 0x05
    3c3c:	0f c0       	rjmp	.+30     	; 0x3c5c <main+0x1b6>
    3c3e:	88 ec       	ldi	r24, 0xC8	; 200
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	9c 83       	std	Y+4, r25	; 0x04
    3c44:	8b 83       	std	Y+3, r24	; 0x03
    3c46:	8b 81       	ldd	r24, Y+3	; 0x03
    3c48:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <main+0x1a4>
    3c4e:	9c 83       	std	Y+4, r25	; 0x04
    3c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	8d 81       	ldd	r24, Y+5	; 0x05
    3c54:	9e 81       	ldd	r25, Y+6	; 0x06
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <main+0x198>
    3c64:	a0 cf       	rjmp	.-192    	; 0x3ba6 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c66:	6f 81       	ldd	r22, Y+7	; 0x07
    3c68:	78 85       	ldd	r23, Y+8	; 0x08
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	9a 81       	ldd	r25, Y+2	; 0x02
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <main+0x1e0>
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	8b cf       	rjmp	.-234    	; 0x3ba6 <main+0x100>

00003c90 <__prologue_saves__>:
    3c90:	2f 92       	push	r2
    3c92:	3f 92       	push	r3
    3c94:	4f 92       	push	r4
    3c96:	5f 92       	push	r5
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	ca 1b       	sub	r28, r26
    3cba:	db 0b       	sbc	r29, r27
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	09 94       	ijmp

00003cc8 <__epilogue_restores__>:
    3cc8:	2a 88       	ldd	r2, Y+18	; 0x12
    3cca:	39 88       	ldd	r3, Y+17	; 0x11
    3ccc:	48 88       	ldd	r4, Y+16	; 0x10
    3cce:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cda:	b9 84       	ldd	r11, Y+9	; 0x09
    3cdc:	c8 84       	ldd	r12, Y+8	; 0x08
    3cde:	df 80       	ldd	r13, Y+7	; 0x07
    3ce0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ce2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ce4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ce6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ce8:	aa 81       	ldd	r26, Y+2	; 0x02
    3cea:	b9 81       	ldd	r27, Y+1	; 0x01
    3cec:	ce 0f       	add	r28, r30
    3cee:	d1 1d       	adc	r29, r1
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	cd bf       	out	0x3d, r28	; 61
    3cfa:	ed 01       	movw	r28, r26
    3cfc:	08 95       	ret

00003cfe <itoa>:
    3cfe:	fb 01       	movw	r30, r22
    3d00:	9f 01       	movw	r18, r30
    3d02:	e8 94       	clt
    3d04:	42 30       	cpi	r20, 0x02	; 2
    3d06:	c4 f0       	brlt	.+48     	; 0x3d38 <itoa+0x3a>
    3d08:	45 32       	cpi	r20, 0x25	; 37
    3d0a:	b4 f4       	brge	.+44     	; 0x3d38 <itoa+0x3a>
    3d0c:	4a 30       	cpi	r20, 0x0A	; 10
    3d0e:	29 f4       	brne	.+10     	; 0x3d1a <itoa+0x1c>
    3d10:	97 fb       	bst	r25, 7
    3d12:	1e f4       	brtc	.+6      	; 0x3d1a <itoa+0x1c>
    3d14:	90 95       	com	r25
    3d16:	81 95       	neg	r24
    3d18:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1a:	64 2f       	mov	r22, r20
    3d1c:	77 27       	eor	r23, r23
    3d1e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__udivmodhi4>
    3d22:	80 5d       	subi	r24, 0xD0	; 208
    3d24:	8a 33       	cpi	r24, 0x3A	; 58
    3d26:	0c f0       	brlt	.+2      	; 0x3d2a <itoa+0x2c>
    3d28:	89 5d       	subi	r24, 0xD9	; 217
    3d2a:	81 93       	st	Z+, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	a1 f7       	brne	.-24     	; 0x3d1a <itoa+0x1c>
    3d32:	16 f4       	brtc	.+4      	; 0x3d38 <itoa+0x3a>
    3d34:	5d e2       	ldi	r21, 0x2D	; 45
    3d36:	51 93       	st	Z+, r21
    3d38:	10 82       	st	Z, r1
    3d3a:	c9 01       	movw	r24, r18
    3d3c:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <strrev>

00003d40 <strrev>:
    3d40:	dc 01       	movw	r26, r24
    3d42:	fc 01       	movw	r30, r24
    3d44:	67 2f       	mov	r22, r23
    3d46:	71 91       	ld	r23, Z+
    3d48:	77 23       	and	r23, r23
    3d4a:	e1 f7       	brne	.-8      	; 0x3d44 <strrev+0x4>
    3d4c:	32 97       	sbiw	r30, 0x02	; 2
    3d4e:	04 c0       	rjmp	.+8      	; 0x3d58 <strrev+0x18>
    3d50:	7c 91       	ld	r23, X
    3d52:	6d 93       	st	X+, r22
    3d54:	70 83       	st	Z, r23
    3d56:	62 91       	ld	r22, -Z
    3d58:	ae 17       	cp	r26, r30
    3d5a:	bf 07       	cpc	r27, r31
    3d5c:	c8 f3       	brcs	.-14     	; 0x3d50 <strrev+0x10>
    3d5e:	08 95       	ret

00003d60 <__udivmodhi4>:
    3d60:	aa 1b       	sub	r26, r26
    3d62:	bb 1b       	sub	r27, r27
    3d64:	51 e1       	ldi	r21, 0x11	; 17
    3d66:	07 c0       	rjmp	.+14     	; 0x3d76 <__udivmodhi4_ep>

00003d68 <__udivmodhi4_loop>:
    3d68:	aa 1f       	adc	r26, r26
    3d6a:	bb 1f       	adc	r27, r27
    3d6c:	a6 17       	cp	r26, r22
    3d6e:	b7 07       	cpc	r27, r23
    3d70:	10 f0       	brcs	.+4      	; 0x3d76 <__udivmodhi4_ep>
    3d72:	a6 1b       	sub	r26, r22
    3d74:	b7 0b       	sbc	r27, r23

00003d76 <__udivmodhi4_ep>:
    3d76:	88 1f       	adc	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	5a 95       	dec	r21
    3d7c:	a9 f7       	brne	.-22     	; 0x3d68 <__udivmodhi4_loop>
    3d7e:	80 95       	com	r24
    3d80:	90 95       	com	r25
    3d82:	bc 01       	movw	r22, r24
    3d84:	cd 01       	movw	r24, r26
    3d86:	08 95       	ret

00003d88 <_exit>:
    3d88:	f8 94       	cli

00003d8a <__stop_program>:
    3d8a:	ff cf       	rjmp	.-2      	; 0x3d8a <__stop_program>
